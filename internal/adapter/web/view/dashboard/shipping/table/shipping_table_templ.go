// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
)

func ShippingTable(projectId string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"dashboard-shipping-table\" x-data=\"shippingTable(&#39;shipping-uuid&#39;)\" x-init=\"init()\"><!-- Tabs for Shipping Status --><div class=\"px-6 px-lg-7 pt-1 border-bottom\"><ul class=\"nav nav-tabs nav-tabs-flush gap-8 overflow-x border-0 mt-4\"><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;all&#39;}\" @click.prevent=\"selectTab(&#39;all&#39;)\" class=\"nav-link active\">All</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;pending&#39;}\" @click.prevent=\"selectTab(&#39;pending&#39;)\" class=\"nav-link\">Pending</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;send&#39;}\" @click.prevent=\"selectTab(&#39;send&#39;)\" class=\"nav-link\">Send</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;payment_received&#39;}\" @click.prevent=\"selectTab(&#39;payment_received&#39;)\" class=\"nav-link\">Payment Received</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;on_the_way&#39;}\" @click.prevent=\"selectTab(&#39;on_the_way&#39;)\" class=\"nav-link\">On the Way</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;cancelled&#39;}\" @click.prevent=\"selectTab(&#39;cancelled&#39;)\" class=\"nav-link\">Cancelled</a></li></ul></div><!-- Bulk Action Dropdown --><div class=\"d-flex gap-2 py-3 px-7 border-bottom\"><div class=\"dropdown\" x-data=\"{ showDropdown: false }\" @click.outside=\"showDropdown = false\"><button class=\"btn btn-sm btn-neutral dropdown-toggle\" type=\"button\" @click=\"showDropdown = !showDropdown\" :aria-expanded=\"showDropdown.toString()\" aria-expanded=\"false\"><i class=\"bi bi-plus-circle\"></i> <span class=\"ms-2\">Bulk Action</span></button><div class=\"dropdown-menu\" :class=\"{ &#39;show&#39;: showDropdown }\"><!-- Bulk Action Options --><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusSend\" value=\"send\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusSend\">Send to Shipping</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusPaymentReceived\" value=\"payment_received\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusPaymentReceived\">Update to Payment Received</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusOnTheWay\" value=\"on_the_way\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusOnTheWay\">Mark as On the Way</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusCancelled\" value=\"cancelled\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusCancelled\">Cancel Order</label></div></div><!-- Apply Button --><div class=\"mt-3\"><button type=\"button\" class=\"btn btn-sm btn-primary d-sm-inline-flex position-relative\" @click=\"applyAction\"><span x-show=\"!loading\">Apply</span> <span x-show=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\"></span> <i class=\"px-3 bi bi-arrow-right\"></i></button></div><div class=\"mt-3\"><div x-show=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\"><span x-text=\"errorMessage\"></span></div></div></div></div></div><!-- Shipping Table --><div class=\"table-responsive\"><table class=\"table table-hover table-nowrap\"><thead><tr><th><div class=\"text-base\"><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" @change=\"selectAll()\" x-model=\"selectAllCheckbox\"></div></div></th><th @click=\"sortTable(&#39;orderId&#39;)\">Order ID <i :class=\"getSortIcon(&#39;orderId&#39;)\" class=\"bi bi-chevron-down\"></i></th><th @click=\"sortTable(&#39;timestamp&#39;)\">Date <i :class=\"getSortIcon(&#39;timestamp&#39;)\"></i></th><th @click=\"sortTable(&#39;total_amount&#39;)\">Total Amount <i :class=\"getSortIcon(&#39;total_amount&#39;)\"></i></th><th>Status</th></tr></thead> <tbody><!-- No Orders Found --><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"5\">No orders found.</td></tr></template><!-- Orders Data --><template x-for=\"order in paginatedOrders\" :key=\"order.id\"><tr><td><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" :value=\"order.orderId\" x-model=\"selectedOrders\"></div></td><td x-text=\"order.orderId\"></td><td x-text=\"new Date(order.timestamp).toLocaleString()\"></td><td x-text=\"order.total_amount\"></td><td><span :class=\"badgeClass(order.status)\" x-text=\"order.status\"></span></td></tr></template><!-- Fill remaining rows if less than 10 --><template x-for=\"i in 10 - paginatedOrders.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"5\" class=\"py-7\"></td></tr></template></tbody></table></div><!-- Pagination --><div class=\"py-4 px-6\"><div class=\"row align-items-center justify-content-between\"><div class=\"col-md-6 d-none d-md-block\"><span class=\"text-muted text-sm\">Showing <span x-text=\"currentPageEnd\">1</span> of <span x-text=\"totalItems\">1</span> results</span></div><div class=\"col-md-auto\"><nav aria-label=\"Page navigation example\"><ul class=\"pagination pagination-spaced gap-1\"><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === 1}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(1)\"><i class=\"bi bi-chevron-double-left\"></i></a></li><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === 1}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage - 1)\"><i class=\"bi bi-chevron-left\"></i></a></li><template x-for=\"page in pageNumbers\" :key=\"page\"><li class=\"page-item\" :class=\"{&#39;active&#39;: currentPage === page}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(page)\" x-text=\"page\"></a></li></template><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === totalPages}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage + 1)\"><i class=\"bi bi-chevron-right\"></i></a></li><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === totalPages}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(totalPages)\"><i class=\"bi bi-chevron-double-right\"></i></a></li></ul></nav></div></div></div></div><script>\r\n    function shippingTable(uuid) {\r\n        return {\r\n            currentTab: 'all',\r\n            selectedOrders: [],\r\n            selectedStatus: '',\r\n            loading: false,\r\n            errorMessage: '',\r\n            paginatedOrders: [], // Array to hold orders to display\r\n            totalItems: 0,\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            currentPageEnd: 10,\r\n            selectTab(tab) {\r\n                this.currentTab = tab;\r\n                this.fetchOrders(); // Fetch the orders for the selected tab\r\n            },\r\n            selectAll() {\r\n                // Logic for selecting all orders\r\n            },\r\n            sortTable(column) {\r\n                // Sorting logic for table\r\n            },\r\n            getSortIcon(column) {\r\n                // Return icon class based on sorting order\r\n            },\r\n            badgeClass(status) {\r\n                const baseClass = 'badge bg-body-secondary badge-custom';\r\n                switch (status) {\r\n                    case 'pending':\r\n                        return `${baseClass} text-warning`;\r\n                    case 'send':\r\n                        return `${baseClass} text-info`;\r\n                    case 'payment_received':\r\n                        return `${baseClass} text-success`;\r\n                    case 'on_the_way':\r\n                        return `${baseClass} text-primary`;\r\n                    case 'cancelled':\r\n                        return `${baseClass} text-danger`;\r\n                    default:\r\n                        return baseClass;\r\n                }\r\n            },\r\n            applyAction() {\r\n                this.loading = true;\r\n                this.errorMessage = '';\r\n\r\n                // Logic to apply the bulk action based on selected status\r\n                // Simulating API call\r\n                setTimeout(() => {\r\n                    this.loading = false;\r\n                    // Error handling or success notification\r\n                }, 1000);\r\n            },\r\n            fetchOrders() {\r\n                // Fetch orders based on currentTab from server (mocked for now)\r\n                this.paginatedOrders = [\r\n                    // Mocked order data\r\n                    { orderId: '12345', timestamp: Date.now(), total_amount: '100.00', status: 'pending' },\r\n                    { orderId: '12346', timestamp: Date.now(), total_amount: '200.00', status: 'send' }\r\n                ];\r\n                this.totalItems = this.paginatedOrders.length;\r\n                this.totalPages = Math.ceil(this.totalItems / 10);\r\n            },\r\n            init() {\r\n                this.fetchOrders(); // Fetch initial orders\r\n            },\r\n            changePage(page) {\r\n                if (page > 0 && page <= this.totalPages) {\r\n                    this.currentPage = page;\r\n                    this.fetchOrders(); // Fetch orders for the new page\r\n                }\r\n            }\r\n        };\r\n    }\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
