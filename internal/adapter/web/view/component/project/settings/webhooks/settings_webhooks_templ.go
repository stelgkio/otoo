// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
	h "github.com/stelgkio/otoo/internal/adapter/web/view/component/project/settings/settings_header"
	"github.com/stelgkio/otoo/internal/core/domain"
)

func SettingsWebhooks(project *domain.Project, projectExtensions []*domain.ProjectExtension) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"dashboard-content\" class=\"flex-fill overflow-y-lg-auto scrollbar bg-body rounded-top-4 rounded-top-start-lg-4 rounded-top-end-lg-0 border-top border-lg shadow-2\"><main class=\"container-fluid px-3 py-5 p-lg-6 p-xxl-8\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = h.SettingsHeader("Project Webhooks", 3, project.Id.String(), projectExtensions).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"dashboard-order-table\" x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("webhookTable('%s')", project.Id.String()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/component/project/settings/webhooks/settings_webhooks.templ`, Line: 19, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" x-init=\"init()\"><div class=\"border-top\"><div class=\"d-flex gap-2 py-3 px-7 border-bottom\"><div class=\"dropdown\" x-data=\"{ showDropdown: false }\" @click.outside=\"showDropdown = false\"><button class=\"btn btn-sm btn-neutral dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton2\" @click=\"showDropdown = !showDropdown\" :aria-expanded=\"showDropdown.toString()\"><i class=\"bi bi-plus-circle\"></i> <span class=\"ms-2\">Bulk Action</span></button><div class=\"dropdown-menu\" :class=\"{ &#39;show&#39;: showDropdown }\" aria-labelledby=\"dropdownMenuButton2\"><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusactive\" value=\"active\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusTodo\">Change status to <strong>Active</strong></label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statupaused\" value=\"paused\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusInProgress\">Change status to <strong>Paused</strong></label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusdisabled\" value=\"disabled\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusDone\">Change status to <strong>Disabled</strong></label></div></div><!-- Add other status options here --><div class=\"mt-3\"><button type=\"button\" class=\"btn btn-sm btn-primary d-sm-inline-flex position-relative\" @click=\"applyAction\"><span x-show=\"!loading\">Apply </span> <span x-show=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> <i class=\"px-3 bi bi-arrow-right\"></i></button></div><div class=\"mt-3\"><div x-show=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\"><span x-text=\"errorMessage\"></span></div></div></div></div><div class=\"hstack gap-2 ms-auto\"><button x-show=\"webhooks.length &gt; 0\" data-bs-target=\"#deleteProjectModal\" data-bs-toggle=\"modal\" class=\"btn btn-sm btn-danger\"><span id=\"spinner\" class=\"htmx-indicator spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Delete All</button> <button x-show=\"webhooks.length === 0\" data-bs-toggle=\"modal\" data-bs-target=\"#createWebhookModal\" class=\"btn btn-sm btn-primary\"><span id=\"spinner2\" class=\"htmx-indicator spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> <i class=\"bi bi-plus-circle\"></i> Create Webhooks</button><!-- Delete All Button (visible when webhooks exist) --></div></div><div class=\"table-responsive\"><table class=\"table table-hover table-nowrap\"><thead><tr><th><div class=\"text-base\"><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" @change=\"selectAll()\" x-model=\"selectAllCheckbox\"></div></div></th><th @click=\"sortTable(&#39;webhookId&#39;)\">Webhook ID <i :class=\"getSortIcon(&#39;webhookId&#39;)\"></i></th><th @click=\"sortTable(&#39;event&#39;)\">Event <i :class=\"getSortIcon(&#39;event&#39;)\"></i></th><th @click=\"sortTable(&#39;status&#39;)\">Status <i :class=\"getSortIcon(&#39;status&#39;)\"></i></th></tr></thead> <tbody><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"8\">No webhook found.</td></tr></template><template x-for=\"webhook in paginatedwebhooks\" :key=\"webhook.id\"><tr><td><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" :value=\"webhook.id\" x-model=\"selectedwebhooks\"></div></td><td x-text=\"webhook.webhookId\"></td><td x-text=\"webhook.event\"></td><td><span :class=\"badgeClass(webhook.status)\" x-text=\"webhook.status\"></span></td></tr></template><template x-for=\"i in 12 - paginatedwebhooks.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"5\" class=\"py-7\"></td></tr></template></tbody></table></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = p.PaginationControl().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div><div class=\"modal fade\" id=\"deleteProjectModal\" tabindex=\"-1\" aria-labelledby=\"deleteProjectModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog modal-dialog-centered\"><div class=\"modal-content overflow-hidden\"><div class=\"modal-header pb-0 border-0\"><h1 class=\"modal-title h4\" id=\"deleteProjectModalLabel\">Delete Webhooks</h1><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body p-0\"><div class=\"px-6 py-5 border-bottom\"><h3 class=\"modal-title h4\" id=\"deleteProjectModalLabel\">Are you sure you want to delete all  Webhooks? You will bot be able to get updateds from your e-commerce</h3></div><div class=\"px-6 py-5 bg-body-secondary d-flex justify-content-center\"><button type=\"submit\" hx-delete=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/project/settings/webhook/delete/%s",
			project.Id.String()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/component/project/settings/webhooks/settings_webhooks.templ`, Line: 241, Col: 28}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"btn btn-sm btn-danger\" hx-target=\"#dashboard-content\" data-bs-dismiss=\"modal\" aria-label=\"Close\" hx-indicator=\"#spinner\">Delete </button></div></div></div></div></div><div class=\"modal fade\" id=\"createWebhookModal\" tabindex=\"-1\" aria-labelledby=\"createWebhookModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog modal-dialog-centered\"><div class=\"modal-content overflow-hidden\"><div class=\"modal-header pb-0 border-0\"><h1 class=\"modal-title h4\" id=\"createWebhookModalLabel\">Create Webhooks</h1><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body p-0\"><div class=\"px-6 py-5 border-bottom\"><h3 class=\"modal-title h4\" id=\"createWebhookModalLabel\">This will create a webhook for all events for your project. You will be able to see the webhook in the webhook section.</h3></div><div class=\"px-6 py-5 bg-body-secondary d-flex justify-content-center\"><button type=\"submit\" hx-get=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/project/settings/webhook/createall/%s",
			project.Id.String()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/component/project/settings/webhooks/settings_webhooks.templ`, Line: 279, Col: 28}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"btn btn-sm btn-dark\" hx-target=\"#dashboard-content\" data-bs-dismiss=\"modal\" aria-label=\"Close\" hx-indicator=\"#spinner2\">Create Webhooks</button></div></div></div></div></div></main><script>\n\t\tfunction webhookTable(projectId) {\n\t\t\treturn {\n\t\t\t\tprojectID: projectId,\n\t\t\t\tcurrentTab: 'all',\n\t\t\t\twebhooks: [],\n\t\t\t\tselectedwebhooks: [],\n\t\t\t\tselectAllCheckbox: false,\n\t\t\t\tsortKey: 'event',\n\t\t\t\tsortAsc: false,\n\t\t\t\tcurrentPage: 1,\n\t\t\t\titemsPerPage: 12,\n\t\t\t\ttotalItems: 0,\n\t\t\t\ttotalPages: 0,\n\t\t\t\tloading: false,\n\t\t\t\tshowUI: false,\n\t\t\t\terrorMessage: '',\n\n\t\t\t\tasync init() {\n\t\t\t\t\tawait this.fetchwebhooks(this.currentPage);\n\t\t\t\t\t// this.showUI = true; // Show UI after the delay\n\t\t\t\t},\n\n\t\t\t\tasync fetchwebhooks(page = 1) {\n\t\t\t\t\tthis.loading = true;\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst url = this.getUrlForTab(this.currentTab, page);\n\t\t\t\t\t\tconst response = await fetch(url);\n\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tthis.webhooks = result.data || [];\n\t\t\t\t\t\t\tthis.totalItems = result.meta.totalItems || 0;\n\t\t\t\t\t\t\tthis.currentPage = result.meta.currentPage || 1;\n\t\t\t\t\t\t\tthis.itemsPerPage = result.meta.itemsPerPage || 10;\n\t\t\t\t\t\t\tthis.totalPages = result.meta.totalPages || 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('Error fetching data:', result.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error fetching data:', error);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tgetUrlForTab(tab, page) {\n\t\t\t\t\tconst baseUrl = `${window.location.origin}/webhook/table/${this.projectID}`;\n\t\t\t\t\tconst sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction\n\t\t\t\t\tswitch (tab) {\n\t\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t\tcase 'completed':\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t\tcase 'processing':\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t\tcase 'pending':\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t\tcase 'cancelled':\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tselectTab(tab) {\n\t\t\t\t\tthis.currentTab = tab;\n\t\t\t\t\tthis.currentPage = 1; // Reset to first page\n\t\t\t\t\tthis.fetchwebhooks(this.currentPage);\n\t\t\t\t},\n\n\t\t\t\tselectAll() {\n\t\t\t\t\tthis.selectedwebhooks = this.selectAllCheckbox ? this.webhooks.map(d => d.id) : [];\n\t\t\t\t},\n\t\t\t\tsortTable(key) {\n\t\t\t\t\tif (this.sortKey === key) {\n\t\t\t\t\t\t// Toggle sort direction if the same column is clicked\n\t\t\t\t\t\tthis.sortAsc = !this.sortAsc;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Set new sort key and default to ascending order\n\t\t\t\t\t\tthis.sortKey = key;\n\t\t\t\t\t\tthis.sortAsc = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort the fetched webhook data locally\n\t\t\t\t\tthis.webhooks = this.webhooks.sort((a, b) => {\n\t\t\t\t\t\tlet valueA = a[key];\n\t\t\t\t\t\tlet valueB = b[key];\n\n\t\t\t\t\t\t// Handle different data types (string, number, etc.)\n\t\t\t\t\t\tif (typeof valueA === 'string') {\n\t\t\t\t\t\t\tvalueA = valueA.toLowerCase(); // Make string comparisons case-insensitive\n\t\t\t\t\t\t\tvalueB = valueB.toLowerCase();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.sortAsc) {\n\t\t\t\t\t\t\treturn valueA > valueB ? 1 : valueA < valueB ? -1 : 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn valueA < valueB ? 1 : valueA > valueB ? -1 : 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tgetSortIcon(key) {\n\t\t\t\t\tif (this.sortKey !== key) return '';\n\t\t\t\t\treturn this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';\n\t\t\t\t},\n\n\t\t\t\tchangePage(page) {\n\t\t\t\t\tif (page < 1 || page > this.totalPages) return;\n\t\t\t\t\tthis.fetchwebhooks(page);\n\t\t\t\t},\n\n\t\t\t\tget paginatedwebhooks() {\n\t\t\t\t\treturn this.webhooks;\n\t\t\t\t},\n\n\t\t\t\tget currentPageStart() {\n\t\t\t\t\treturn (this.currentPage - 1) * this.itemsPerPage + 1;\n\t\t\t\t},\n\n\t\t\t\tget currentPageEnd() {\n\t\t\t\t\treturn Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\n\t\t\t\t},\n\t\t\t\tget pageNumbers() {\n\t\t\t\t\tconst range = 2; // Number of pages to show around the current page\n\t\t\t\t\tlet start = Math.max(1, this.currentPage - range);\n\t\t\t\t\tlet end = Math.min(this.totalPages, this.currentPage + range);\n\n\t\t\t\t\t// Adjust range if there are not enough pages on one side\n\t\t\t\t\tif (this.totalPages - end < range) {\n\t\t\t\t\t\tend = this.totalPages;\n\t\t\t\t\t\tstart = Math.max(1, end - 2 * range);\n\t\t\t\t\t} else if (start <= range) {\n\t\t\t\t\t\tstart = 1;\n\t\t\t\t\t\tend = Math.min(this.totalPages, start + 2 * range);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Array.from({ length: end - start + 1 }, (_, i) => start + i);\n\t\t\t\t},\n\t\t\t\tbadgeClass(status) {\n\t\t\t\t\tconst baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class\n\t\t\t\t\tswitch (status) {\n\t\t\t\t\t\tcase 'paused':\n\t\t\t\t\t\t\treturn `${baseClass} text-warning`;\n\t\t\t\t\t\tcase 'active':\n\t\t\t\t\t\t\treturn `${baseClass} text-success`;\n\t\t\t\t\t\tcase 'disabled':\n\t\t\t\t\t\t\treturn `${baseClass} text-danger`;\n\t\t\t\t\t\tcase 'paused':\n\t\t\t\t\t\t\treturn `${baseClass} text-warning`;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn baseClass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tasync applyAction() {\n\t\t\t\t\tthis.loading = true;\n\t\t\t\t\tthis.errorMessage = \"\"; // Clear previous error message\n\t\t\t\t\tthis.showDropdown = true; // Close dropdown on action\n\n\t\t\t\t\tconst selectedOrderIds = this.selectedOrders.join(',');\n\t\t\t\t\tif (!selectedOrderIds || !this.selectedStatus) {\n\t\t\t\t\t\tthis.errorMessage = 'Please select at least one order and a status.';\n\t\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t\tthis.showDropdown = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch(`/webhook/bulk-action/${this.projectID}`, {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\tstatus: this.selectedStatus,\n\t\t\t\t\t\t\t\twebhooks: selectedOrderIds.split(','),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst result = await response.json();\n\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\t// Handle success (e.g., show a success message or refresh the table)\n\t\t\t\t\t\t\tthis.fetchOrders(this.currentPage);\n\t\t\t\t\t\t\tconsole.log('Bulk action successful:', result);\n\t\t\t\t\t\t\tthis.showDropdown = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.errorMessage = result.message || 'An error occurred while processing the request.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error during bulk action:', error);\n\t\t\t\t\t\tthis.errorMessage = 'An error occurred while processing the request.';\n\t\t\t\t\t\tthis.showDropdown = true;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.loading = false;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tasync createWebhooks() {\n\t\t\t\t\t// Logic for creating a new webhook (could be a form, modal, or redirection)\n\t\t\t\t\tconsole.log(\"Redirecting to create webhooks...\");\n\t\t\t\t\twindow.location.href = `/webhooks/create/${this.projectID}`;  // Example: Redirecting to a webhook creation page\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t</script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
