package views

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
)

templ OrderTable(projectId string) {
	<div id="dashboard-order">
		<div class="mb-1 mb-xl-10">
			<div class="col">
				<div class="hstack gap-2 justify-content-start">
					<button
						class="btn btn-sm btn-neutral "
						type="button"
						hx-get={ fmt.Sprintf("/order/chart/%s", projectId) }
						hx-target="#dashboard-order"
					>
						<i class="bi bi-bar-chart-fill"></i> <span class="ms-2">Charts</span>
					</button>
					<button
						class="btn btn-sm btn-neutral "
						type="button"
						hx-get={ fmt.Sprintf("/order/chart/%s", projectId) }
						hx-target="#dashboard-order"
					>
						<i class="bi bi-box-seam-fill"></i> <span class="ms-2">Courier</span>
					</button>
				</div>
			</div>
		</div>
		<div id="dashboard-order-table" x-data={ fmt.Sprintf("orderTable('%s')", projectId) } x-init="init()">
			<div class="px-6 px-lg-7 pt-1 border-bottom">
				<ul class="nav nav-tabs nav-tabs-flush gap-8 overflow-x border-0 mt-4">
					<li class="nav-item">
						<a
							href="#"
							:class="{'nav-link': true, 'active': currentTab === 'all'}"
							@click.prevent="selectTab('all')"
						>All</a>
					</li>
					<li class="nav-item">
						<a
							href="#"
							:class="{'nav-link': true, 'active': currentTab === 'completed'}"
							@click.prevent="selectTab('completed')"
						>Completed</a>
					</li>
					<li class="nav-item">
						<a
							href="#"
							:class="{'nav-link': true, 'active': currentTab === 'pending'}"
							@click.prevent="selectTab('pending')"
						>Pending</a>
					</li>
					<li class="nav-item">
						<a
							href="#"
							:class="{'nav-link': true, 'active': currentTab === 'processing'}"
							@click.prevent="selectTab('processing')"
						>Processing</a>
					</li>
					<li class="nav-item">
						<a
							href="#"
							:class="{'nav-link': true, 'active': currentTab === 'cancelled'}"
							@click.prevent="selectTab('cancelled')"
						>Canceled</a>
					</li>
				</ul>
			</div>
			<div class="d-flex gap-2 py-3 px-7 border-bottom">
				<div class="dropdown" x-data="{ showDropdown: false }" @click.outside="showDropdown = false">
					<button
						class="btn btn-sm btn-neutral dropdown-toggle"
						type="button"
						id="dropdownMenuButton2"
						@click="showDropdown = !showDropdown"
						:aria-expanded="showDropdown.toString()"
					>
						<i class="bi bi-plus-circle"></i> <span class="ms-2">Bulk Action</span>
					</button>
					<div class="dropdown-menu" :class="{ 'show': showDropdown }" aria-labelledby="dropdownMenuButton2">
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input
									class="form-check-input"
									type="radio"
									name="statusOption"
									id="statusBacklog"
									value="asc_courier"
									x-model="selectedStatus"
								/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusBacklog">Send to Couries and update to completed</label>
							</div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input
									class="form-check-input"
									type="radio"
									name="statusOption"
									id="statusCompleted"
									value="completed"
									x-model="selectedStatus"
								/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusTodo">Change status to completed</label>
							</div>
							// <div class="ms-auto">
							// <span class="badge rounded-pill bg-opacity-25 bg-success text-success">23</span>
							// </div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input
									class="form-check-input"
									type="radio"
									name="statusOption"
									id="statuSpending"
									value="pending"
									x-model="selectedStatus"
								/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusInProgress">Change status to pending</label>
							</div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input
									class="form-check-input"
									type="radio"
									name="statusOption"
									id="statusProdessing"
									value="processing"
									x-model="selectedStatus"
								/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusDone">Change status to processing</label>
							</div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input
									class="form-check-input"
									type="radio"
									name="statusOption"
									id="statusCancelled"
									value="cancelled"
									x-model="selectedStatus"
								/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusCancelled">Change status to cancelled</label>
							</div>
						</div>
						<!-- Add other status options here -->
						<div class="mt-3">
							<button
								type="button"
								class="btn btn-sm btn-primary d-sm-inline-flex position-relative"
								@click="applyAction"
							>
								<span x-show="!loading">Apply </span>
								<span
									x-show="loading"
									class="spinner-border spinner-border-sm"
									role="status"
									aria-hidden="true"
								></span>
								<i class="px-3 bi bi-arrow-right"></i>
							</button>
						</div>
						<div class="mt-3">
							<div x-show="errorMessage" class="alert alert-danger" role="alert">
								<span x-text="errorMessage"></span>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="table-responsive">
				<table class="table table-hover table-nowrap">
					<thead>
						<tr>
							<th>
								<div class="text-base">
									<div class="form-check">
										<input
											class="form-check-input"
											type="checkbox"
											@change="selectAll()"
											x-model="selectAllCheckbox"
										/>
									</div>
								</div>
							</th>
							<th @click="sortTable('orderId')">
								Order ID
								<i :class="getSortIcon('orderId')"></i>
							</th>
							<th @click="sortTable('timestamp')">
								Date
								<i :class="getSortIcon('timestamp')"></i>
							</th>
							<th @click="sortTable('total_amount')">
								Total Amount
								<i :class="getSortIcon('total_amount')"></i>
							</th>
							<th>Status</th>
						</tr>
					</thead>
					<tbody>
						<template x-if="!loading && totalItems === 0">
							<tr>
								<td colspan="5">No orders found.</td>
							</tr>
						</template>
						<template x-for="order in paginatedOrders" :key="order.id">
							<tr>
								<td>
									<div class="form-check">
										<input
											class="form-check-input"
											type="checkbox"
											:value="order.orderId"
											x-model="selectedOrders"
										/>
									</div>
								</td>
								<td x-text="order.orderId"></td>
								<td x-text="new Date(order.timestamp).toLocaleString()"></td>
								<td x-text="order.total_amount"></td>
								<td>
									<span :class="badgeClass(order.status)" x-text="order.status"></span>
								</td>
							</tr>
						</template>
						<!-- Fill remaining rows if less than 10 -->
						<template x-for="i in 10 - paginatedOrders.length" :key="'empty' + i">
							<tr>
								<td colspan="5" class="py-7"></td>
							</tr>
						</template>
					</tbody>
				</table>
			</div>
			@p.PaginationControl()
		</div>
	</div>
	<script>
	function orderTable(projectId) {
		return {
			projectID: projectId,
			currentTab: 'all',
			orders: [],
			selectedOrders: [],
			selectAllCheckbox: false,
			sortKey: 'orderId',
			sortAsc: false,
			currentPage: 1,
			itemsPerPage: 10,
			totalItems: 0,
			totalPages: 0,
			loading: false,
			selectedStatus: '',
			errorMessage: '',

			async init() {
				await this.fetchOrders(this.currentPage);
			},

			async fetchOrders(page = 1) {
				this.loading = true;
				try {
					const url = this.getUrlForTab(this.currentTab, page);
					const response = await fetch(url);
					const result = await response.json();
					if (response.ok) {
						this.orders = result.data || [];
						this.totalItems = result.meta.totalItems || 0;
						this.currentPage = result.meta.currentPage || 1;
						this.itemsPerPage = result.meta.itemsPerPage || 10;
						this.totalPages = result.meta.totalPages || 0;
					} else {
						console.error('Error fetching data:', result.message);
					}
				} catch (error) {
					console.error('Error fetching data:', error);
				} finally {
					this.loading = false;
				}
			},

			getUrlForTab(tab, page) {
				const baseUrl = `${window.location.origin}/order/table/${this.projectID}`;
				const sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction
				switch (tab) {
					case 'all':
						return `${baseUrl}/all/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					case 'completed':
						return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					case 'processing':
						return `${baseUrl}/processing/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					case 'pending':
						return `${baseUrl}/pending/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					case 'cancelled':
						return `${baseUrl}/cancelled/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					default:
						return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
				}
			},

			selectTab(tab) {
				this.currentTab = tab;
				this.currentPage = 1; // Reset to first page
				this.fetchOrders(this.currentPage);
			},

			selectAll() {
				this.selectedOrders = this.selectAllCheckbox ? this.orders.map(order => order.orderId) : [];
			},

			sortTable(key) {
				if (this.sortKey === key) {
					this.sortAsc = !this.sortAsc; // Toggle sort direction if the same column is clicked
				} else {
					this.sortKey = key; // Set new sort key
					this.sortAsc = true; // Default to ascending if a new column is selected
				}
				this.fetchOrders(this.currentPage); // Fetch sorted data
			},
			getSortIcon(key) {
				if (this.sortKey !== key) return '';
				return this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';
			},

			changePage(page) {
				if (page < 1 || page > this.totalPages) return;
				this.fetchOrders(page);
			},

			get paginatedOrders() {
				return this.orders;
			},

			get currentPageStart() {
				return (this.currentPage - 1) * this.itemsPerPage + 1;
			},

			get currentPageEnd() {
				return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);
			},
			get pageNumbers() {
				const range = 2; // Number of pages to show around the current page
				let start = Math.max(1, this.currentPage - range);
				let end = Math.min(this.totalPages, this.currentPage + range);

				// Adjust range if there are not enough pages on one side
				if (this.totalPages - end < range) {
					end = this.totalPages;
					start = Math.max(1, end - 2 * range);
				} else if (start <= range) {
					start = 1;
					end = Math.min(this.totalPages, start + 2 * range);
				}

				return Array.from({ length: end - start + 1 }, (_, i) => start + i);
			},
			badgeClass(status) {
				const baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class
				switch (status) {
					case 'pending':
						return `${baseClass} text-warning`;
					case 'completed':
						return `${baseClass} text-success`;
					case 'cancelled':
						return `${baseClass} text-danger`;
					case 'processing':
						return `${baseClass} text-warning`;
					default:
						return baseClass;
				}
			},
			async applyAction() {
				this.loading = true;
				this.errorMessage = ""; // Clear previous error message
				this.showDropdown = true; // Close dropdown on action

				const selectedOrderIds = this.selectedOrders.join(',');
				if (!selectedOrderIds || !this.selectedStatus) {
					this.errorMessage = 'Please select at least one order and a status.';
					this.loading = false;
					this.showDropdown = true;
					return;
				}

				try {
					const response = await fetch(`/order/bulk-action/${this.projectID}`, {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							status: this.selectedStatus,
							orders: selectedOrderIds.split(','),
						}),
					});
					const result = await response.json();

					if (response.ok) {
						// Handle success (e.g., show a success message or refresh the table)
						this.fetchOrders(this.currentPage);
						console.log('Bulk action successful:', result);
						this.showDropdown = false;
					} else {
						this.errorMessage = result.message || 'An error occurred while processing the request.';
					}
				} catch (error) {
					console.error('Error during bulk action:', error);
					this.errorMessage = 'An error occurred while processing the request.';
					this.showDropdown = true;
				} finally {
					this.loading = false;

				}
			},

		};
	}
</script>
}
