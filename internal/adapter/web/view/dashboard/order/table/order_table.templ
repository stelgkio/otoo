package views

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
)

templ OrderTable(projectId string) {
	<div id="dashboard-order">
		<div class="mb-1 mb-xl-10">
			<div class="col">
				<div class="hstack gap-2 justify-content-start">
					<button
						class="btn btn-sm btn-neutral "
						type="button"
						hx-get={ fmt.Sprintf("/order/chart/%s", projectId) }
						hx-target="#dashboard-order"
					>
						<i class="bi bi-bar-chart-fill"></i> <span class="ms-2">Charts</span>
					</button>
					<button
						class="btn btn-sm btn-neutral "
						type="button"
						hx-get={ fmt.Sprintf("/order/chart/%s", projectId) }
						hx-target="#dashboard-order"
					>
						<i class="bi bi-box-seam-fill"></i> <span class="ms-2">Courier</span>
					</button>
				</div>
			</div>
		</div>
		<div id="dashboard-order-table" x-data={ fmt.Sprintf("orderTable('%s')", projectId) } x-init="init()">
			<div class="px-6 px-lg-7 pt-1 border-bottom">
				<ul class="nav nav-tabs nav-tabs-flush gap-8 overflow-x border-0 mt-4">
					<li class="nav-item">
						<a href="#" :class="{'nav-link': true, 'active': currentTab === 'all'}" @click.prevent="selectTab('all')">All</a>
					</li>
					<li class="nav-item">
						<a href="#" :class="{'nav-link': true, 'active': currentTab === 'completed'}" @click.prevent="selectTab('completed')">Completed</a>
					</li>
					<li class="nav-item">
						<a href="#" :class="{'nav-link': true, 'active': currentTab === 'pending'}" @click.prevent="selectTab('pending')">Pending</a>
					</li>
					<li class="nav-item">
						<a href="#" :class="{'nav-link': true, 'active': currentTab === 'processing'}" @click.prevent="selectTab('processing')">Processing</a>
					</li>
					<li class="nav-item">
						<a href="#" :class="{'nav-link': true, 'active': currentTab === 'cancelled'}" @click.prevent="selectTab('cancelled')">Canceled</a>
					</li>
				</ul>
			</div>
			<div class="d-flex gap-2 py-3 px-7 border-bottom">
				<div class="dropdown">
					<button class="btn btn-sm btn-neutral dropdown-toggle" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" data-bs-auto-close="false" aria-expanded="true">
						<i class="bi bi-plus-circle"></i> <span class="ms-2">Bulk Action</span>
					</button>
					<div class="dropdown-menu" aria-labelledby="dropdownMenuButton2">
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input class="form-check-input" type="radio" name="statusOption" id="statusBacklog" value="backlog"/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusBacklog">Send to Couries and update to completed</label>
							</div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input class="form-check-input" type="radio" name="statusOption" id="statusTodo" value="todo"/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusTodo">Change status to completed</label>
							</div>
							// <div class="ms-auto">
							// 	<span class="badge rounded-pill bg-opacity-25 bg-success text-success">23</span>
							// </div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input class="form-check-input" type="radio" name="statusOption" id="statusInProgress" value="in-progress"/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusInProgress">Change status to completed</label>
							</div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input class="form-check-input" type="radio" name="statusOption" id="statusDone" value="done"/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusDone">Change status to processing</label>
							</div>
							// <div class="ms-auto">
							// 	<span class="badge rounded-pill bg-opacity-25 bg-warning text-warning">190</span>
							// </div>
						</div>
						<div class="dropdown-item py-1 px-2 d-flex align-items-center">
							<div class="text-lg">
								<input class="form-check-input" type="radio" name="statusOption" id="statusCancelled" value="cancelled"/>
							</div>
							<div class="ms-3 me-5">
								<label for="statusCancelled">Change status to cancelled</label>
							</div>
						</div>
						<div class="mt-3">
							<button type="button" class="btn btn-sm btn-primary d-sm-inline-flex"><span class="pe-2"></span><span>Apply </span><i class="px-3 bi bi-arrow-right"></i></button>
						</div>
					</div>
				</div>
			</div>
			<div class="table-responsive">
				<table class="table">
					<thead>
						<tr>
							<th>
								<div class="text-base">
									<div class="form-check">
										<input class="form-check-input" type="checkbox" @change="selectAll()" x-model="selectAllCheckbox"/>
									</div>
								</div>
							</th>
							<th @click="sortTable('orderId')">
								Order ID
								<i :class="getSortIcon('orderId')"></i>
							</th>
							<th @click="sortTable('timestamp')">
								Date
								<i :class="getSortIcon('timestamp')"></i>
							</th>
							<th @click="sortTable('total_amount')">
								Total Amount
								<i :class="getSortIcon('total_amount')"></i>
							</th>
							<th>Status</th>
						</tr>
					</thead>
					<tbody>
						<template x-if="!loading && totalItems === 0">
							<tr>
								<td colspan="5">No orders found.</td>
							</tr>
						</template>
						<template x-for="order in paginatedOrders" :key="order.id">
							<tr>
								<td>
									<div class="form-check">
										<input class="form-check-input" type="checkbox" :value="order.orderId" x-model="selectedOrders"/>
									</div>
								</td>
								<td x-text="order.orderId"></td>
								<td x-text="new Date(order.timestamp).toLocaleString()"></td>
								<td x-text="order.total_amount"></td>
								<td>
									<span :class="badgeClass(order.status)" x-text="order.status"></span>
								</td>
							</tr>
						</template>
						<!-- Fill remaining rows if less than 10 -->
						<template x-for="i in 10 - paginatedOrders.length" :key="'empty' + i">
							<tr>
								<td colspan="5" class="py-5"></td>
							</tr>
						</template>
					</tbody>
				</table>
			</div>
			@p.PaginationControl()
		</div>
	</div>
	<script>
function orderTable(projectId) {
    return {
		projectID: projectId,
        currentTab: 'all',
        orders: [],
        selectedOrders: [],
        selectAllCheckbox: false,
        sortKey: 'timestamp',
        sortAsc: false,
        currentPage: 1,
        itemsPerPage: 10,
        totalItems: 0,
        totalPages: 0,
        loading: false,

        async init() {
            await this.fetchOrders(this.currentPage);
        },

        async fetchOrders(page = 1) {
            this.loading = true;
            try {
                const url = this.getUrlForTab(this.currentTab, page);
                const response = await fetch(url);
                const result = await response.json();
                if (response.ok) {
                    this.orders = result.data || [];
                    this.totalItems = result.meta.totalItems || 0;
                    this.currentPage = result.meta.currentPage || 1;
                    this.itemsPerPage = result.meta.itemsPerPage || 10;
                    this.totalPages = result.meta.totalPages || 0;
                } else {
                    console.error('Error fetching data:', result.message);
                }
            } catch (error) {
                console.error('Error fetching data:', error);
            } finally {
                this.loading = false;
            }
        },

         getUrlForTab(tab, page) {
            const baseUrl = `http://localhost:8081/order/table/${this.projectID}`;
            const sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction
            switch (tab) {
                case 'all':
                    return `${baseUrl}/all/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
                case 'completed':
                    return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
                case 'processing':
                    return `${baseUrl}/processing/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
                case 'pending':
                    return `${baseUrl}/pending/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
                case 'cancelled':
                    return `${baseUrl}/cancelled/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
                default:
                    return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
            }
        },

        selectTab(tab) {
            this.currentTab = tab;
            this.currentPage = 1; // Reset to first page
            this.fetchOrders(this.currentPage);
        },

        selectAll() {
            this.selectedOrders = this.selectAllCheckbox ? this.orders.map(order => order.orderId) : [];
        },

      	sortTable(key) {
            if (this.sortKey === key) {
                this.sortAsc = !this.sortAsc; // Toggle sort direction if the same column is clicked
            } else {
                this.sortKey = key; // Set new sort key
                this.sortAsc = true; // Default to ascending if a new column is selected
            }
            this.fetchOrders(this.currentPage); // Fetch sorted data
        },
		  getSortIcon(key) {
            if (this.sortKey !== key) return '';
            return this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';
        },

        changePage(page) {
            if (page < 1 || page > this.totalPages) return;
            this.fetchOrders(page);
        },

        get paginatedOrders() {
            return this.orders;
        },

        get currentPageStart() {
            return (this.currentPage - 1) * this.itemsPerPage + 1;
        },

        get currentPageEnd() {
            return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);
        },
		 badgeClass(status) {
				const baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class
				switch (status) {
					case 'pending':
						return `${baseClass} text-warning`;
					case 'completed':
						return `${baseClass} text-success`;
					case 'cancelled':
						return `${baseClass} text-danger`;
					case 'processing':
						return `${baseClass} text-warning`;
					default:
						return baseClass;
				}
		}		
    };
}
</script>
}
