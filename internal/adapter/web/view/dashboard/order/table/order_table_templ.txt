<div id=\"dashboard-order-table\" x-data=\"orderTable()\" x-init=\"init()\"><div class=\"px-6 px-lg-7 pt-8 border-bottom\"><ul class=\"nav nav-tabs nav-tabs-flush gap-8 overflow-x border-0 mt-4\"><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;all&#39;}\" @click.prevent=\"selectTab(&#39;all&#39;)\">All</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;completed&#39;}\" @click.prevent=\"selectTab(&#39;completed&#39;)\">Completed</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;pending&#39;}\" @click.prevent=\"selectTab(&#39;pending&#39;)\">Pending</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;processing&#39;}\" @click.prevent=\"selectTab(&#39;processing&#39;)\">Processing</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;cancelled&#39;}\" @click.prevent=\"selectTab(&#39;cancelled&#39;)\">Canceled</a></li></ul></div><div class=\"d-flex gap-2 scrollable-x py-3 px-7 border-bottom\"><!-- Your filter buttons here --></div><div class=\"table-responsive\"><table class=\"table\"><thead><tr><th><input type=\"checkbox\" @change=\"selectAll()\" x-model=\"selectAllCheckbox\"></th><th @click=\"sortTable(&#39;orderId&#39;)\">Order ID</th><th @click=\"sortTable(&#39;timestamp&#39;)\">Date</th><th @click=\"sortTable(&#39;total_amount&#39;)\">Total Amount</th><th>Status</th></tr></thead> <tbody><template x-if=\"loading\"><tr><td colspan=\"5\">Loading...</td></tr></template><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"5\">No orders found.</td></tr></template><template x-for=\"order in paginatedOrders\" :key=\"order.id\"><tr><td><input type=\"checkbox\" :value=\"order.orderId\" x-model=\"selectedOrders\"></td><td x-text=\"order.orderId\"></td><td x-text=\"new Date(order.timestamp).toLocaleString()\"></td><td x-text=\"order.total_amount\"></td><td x-text=\"order.status\"></td></tr></template><!-- Fill remaining rows if less than 10 --><template x-for=\"i in 10 - paginatedOrders.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"5\" class=\"py-5\"></td></tr></template></tbody></table></div><!-- Pagination Controls --><div class=\"py-4 px-6\"><div class=\"row align-items-center justify-content-between\"><div class=\"col-md-6 d-none d-md-block\"><span class=\"text-muted text-sm\">Showing <span x-text=\"currentPageStart\"></span> to <span x-text=\"currentPageEnd\"></span> of <span x-text=\"totalItems\"></span> results</span></div><div class=\"col-md-auto\"><nav aria-label=\"Page navigation example\"><ul class=\"pagination pagination-spaced gap-1\"><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === 1}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage - 1)\"><i class=\"bi bi-chevron-left\"></i></a></li><template x-for=\"page in totalPages\" :key=\"page\"><li class=\"page-item\" :class=\"{&#39;active&#39;: currentPage === page}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(page)\" x-text=\"page\"></a></li></template><li class=\"page-item\" :class=\"{&#39;disabled&#39;: currentPage === totalPages}\"><a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage + 1)\"><i class=\"bi bi-chevron-right\"></i></a></li></ul></nav></div></div></div></div><script>\nfunction orderTable() {\n    return {\n        currentTab: 'all',\n        orders: [],\n        selectedOrders: [],\n        selectAllCheckbox: false,\n        sortKey: 'orderId',\n        sortAsc: true,\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalItems: 0,\n        totalPages: 0,\n        loading: false,\n\n        async init() {\n            await this.fetchOrders(this.currentPage);\n        },\n\n        async fetchOrders(page = 1) {\n            this.loading = true;\n            try {\n                const url = this.getUrlForTab(this.currentTab, page);\n                const response = await fetch(url);\n                const result = await response.json();\n                if (response.ok) {\n                    this.orders = result.data || [];\n                    this.totalItems = result.meta.totalItems || 0;\n                    this.currentPage = result.meta.currentPage || 1;\n                    this.itemsPerPage = result.meta.itemsPerPage || 10;\n                    this.totalPages = result.meta.totalPages || 0;\n                } else {\n                    console.error('Error fetching data:', result.message);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        getUrlForTab(tab, page) {\n            const baseUrl = 'http://localhost:8081/order/table/72eabb24-0fc6-428b-b7cf-f1e35608d3fe';\n            switch (tab) {\n                case 'all':\n                    return `${baseUrl}/all/${page}`;\n                case 'completed':\n                    return `${baseUrl}/completed/${page}`;\n                case 'processing':\n                    return `${baseUrl}/processing/${page}`;\n                case 'pending':\n                    return `${baseUrl}/pending/${page}`;\n                case 'cancelled':\n                    return `${baseUrl}/cancelled/${page}`;\n                default:\n                    return `${baseUrl}/completed/${page}`;\n            }\n        },\n\n        selectTab(tab) {\n            this.currentTab = tab;\n            this.currentPage = 1; // Reset to first page\n            this.fetchOrders(this.currentPage);\n        },\n\n        selectAll() {\n            this.selectedOrders = this.selectAllCheckbox ? this.orders.map(order => order.orderId) : [];\n        },\n\n        sortTable(key) {\n            if (this.sortKey === key) {\n                this.sortAsc = !this.sortAsc;\n            } else {\n                this.sortKey = key;\n                this.sortAsc = true;\n            }\n            this.orders.sort((a, b) => {\n                if (a[this.sortKey] < b[this.sortKey]) return this.sortAsc ? -1 : 1;\n                if (a[this.sortKey] > b[this.sortKey]) return this.sortAsc ? 1 : -1;\n                return 0;\n            });\n        },\n\n        changePage(page) {\n            if (page < 1 || page > this.totalPages) return;\n            this.fetchOrders(page);\n        },\n\n        get paginatedOrders() {\n            return this.orders;\n        },\n\n        get currentPageStart() {\n            return (this.currentPage - 1) * this.itemsPerPage + 1;\n        },\n\n        get currentPageEnd() {\n            return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\n        }\n    };\n}\n</script>
