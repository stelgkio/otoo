// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
)

func OrderTable(projectId string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"dashboard-order\"><div class=\"mb-1 mb-xl-10\"><div class=\"col\"><div class=\"hstack gap-2 justify-content-start\"><button class=\"btn btn-sm btn-neutral \" type=\"button\" hx-get=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/order/chart/%s", projectId))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/dashboard/order/table/order_table.templ`, Line: 16, Col: 56}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#dashboard-order\"><i class=\"bi bi-bar-chart-fill\"></i> <span class=\"ms-2\">Charts</span></button> <button class=\"btn btn-sm btn-neutral \" type=\"button\" hx-get=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/voucher/table/html/%s", projectId))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/dashboard/order/table/order_table.templ`, Line: 24, Col: 63}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#dashboard-order\"><i class=\"bi bi-box-seam-fill\"></i> <span class=\"ms-2\">Vouchers</span></button></div></div></div><div id=\"dashboard-order-table\" x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("orderTable('%s')", projectId))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/dashboard/order/table/order_table.templ`, Line: 32, Col: 85}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" x-init=\"init()\"><div class=\"px-6 px-lg-7 pt-1 border-bottom\"><ul class=\"nav nav-tabs nav-tabs-flush gap-8 overflow-x border-0 mt-4\"><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;all&#39;}\" @click.prevent=\"selectTab(&#39;all&#39;)\">All</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;completed&#39;}\" @click.prevent=\"selectTab(&#39;completed&#39;)\">Completed</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;pending&#39;}\" @click.prevent=\"selectTab(&#39;pending&#39;)\">Pending</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;processing&#39;}\" @click.prevent=\"selectTab(&#39;processing&#39;)\">Processing</a></li><li class=\"nav-item\"><a href=\"#\" :class=\"{&#39;nav-link&#39;: true, &#39;active&#39;: currentTab === &#39;cancelled&#39;}\" @click.prevent=\"selectTab(&#39;cancelled&#39;)\">Canceled</a></li></ul></div><div class=\"d-flex gap-2 py-3 px-7 border-bottom\"><div class=\"dropdown\" x-data=\"{ showDropdown: false }\" @click.outside=\"showDropdown = false\"><button class=\"btn btn-sm btn-neutral dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton2\" @click=\"showDropdown = !showDropdown\" :aria-expanded=\"showDropdown.toString()\"><i class=\"bi bi-plus-circle\"></i> <span class=\"ms-2\">Bulk Action</span></button><div class=\"dropdown-menu\" :class=\"{ &#39;show&#39;: showDropdown }\" aria-labelledby=\"dropdownMenuButton2\"><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusBacklog\" value=\"asc_courier\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusBacklog\">Send to Couries and update to completed</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusCompleted\" value=\"completed\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusTodo\">Change status to completed</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statuSpending\" value=\"pending\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusInProgress\">Change status to pending</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusProdessing\" value=\"processing\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusDone\">Change status to processing</label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusCancelled\" value=\"cancelled\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusCancelled\">Change status to cancelled</label></div></div><!-- Add other status options here --><div class=\"mt-3\"><button type=\"button\" class=\"btn btn-sm btn-primary d-sm-inline-flex position-relative\" @click=\"applyAction\"><span x-show=\"!loading\">Apply </span> <span x-show=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> <i class=\"px-3 bi bi-arrow-right\"></i></button></div><div class=\"mt-3\"><div x-show=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\"><span x-text=\"errorMessage\"></span></div></div></div></div></div><div class=\"table-responsive\"><table class=\"table table-hover table-nowrap\"><thead><tr><th><div class=\"text-base\"><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" @change=\"selectAll()\" x-model=\"selectAllCheckbox\"></div></div></th><th @click=\"sortTable(&#39;orderId&#39;)\">Order ID <i :class=\"getSortIcon(&#39;orderId&#39;)\"></i></th><th @click=\"sortTable(&#39;timestamp&#39;)\">Date <i :class=\"getSortIcon(&#39;timestamp&#39;)\"></i></th><th @click=\"sortTable(&#39;total_amount&#39;)\">Total Amount <i :class=\"getSortIcon(&#39;total_amount&#39;)\"></i></th><th>Status</th><th>Action</th></tr></thead> <tbody><!-- Display this row if no orders are found --><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"6\">No orders found.</td></tr></template><!-- Loop through paginated orders --><template x-for=\"order in paginatedOrders\" :key=\"order.id\"><tr><td><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" :value=\"order.orderId\" x-model=\"selectedOrders\"></div></td><td x-text=\"order.orderId\"></td><td x-text=\"new Date(order.timestamp).toLocaleString()\"></td><td x-text=\"order.total_amount + &#39; &#39; + order.currency_symbol\"></td><td><span :class=\"badgeClass(order.status)\" x-text=\"order.status\"></span></td><!-- Action column with the eye icon for modal --><td><button type=\"button\" class=\"btn btn-sm btn-neutral\" @click=\"loadModalData(order)\"><i class=\"bi bi-eye\"></i></button></td></tr></template><!-- Fill remaining rows if there are less than 10 orders to ensure table looks consistent --><template x-for=\"i in 10 - paginatedOrders.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"6\" class=\"py-8\"></td></tr></template></tbody></table></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = OrderModal().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = p.PaginationControl().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div><script>\r\nfunction orderTable(projectId) {\r\n    return {\r\n        projectID: projectId,\r\n        currentTab: 'all',\r\n        orders: [],\r\n        selectedOrders: [],\r\n        selectAllCheckbox: false,\r\n        sortKey: 'orderId',\r\n        sortAsc: false,\r\n        currentPage: 1,\r\n        itemsPerPage: 10,\r\n        totalItems: 0,\r\n        totalPages: 0,\r\n        loading: false,\r\n        selectedStatus: '',\r\n        errorMessage: '',\r\n        showDropdown: false, // Initialize showDropdown\r\n        modalOrder: {\r\n            billing: {\r\n                first_name: '',\r\n                last_name: '',\r\n                address_1: '',\r\n                city: '',\r\n                postcode: '',\r\n                email: '',\r\n                phone: '',\r\n            },\r\n            shipping: {\r\n                first_name: '',\r\n                last_name: '',\r\n                address_1: '',\r\n                city: '',\r\n                postcode: '',\r\n            },\r\n            products: [],\r\n            payment_method: '',\r\n\t\t\tcustomer_note:''\r\n        },\r\n        showModal: false,\r\n\r\n        async init() {\r\n            await this.fetchOrders(this.currentPage);\r\n        },\r\n\r\n        async fetchOrders(page = 1) {\r\n            this.loading = true;\r\n            try {\r\n                const url = this.getUrlForTab(this.currentTab, page);\r\n                const response = await fetch(url);\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    this.orders = result.data || [];\r\n                    this.totalItems = result.meta.totalItems || 0;\r\n                    this.currentPage = result.meta.currentPage || 1;\r\n                    this.itemsPerPage = result.meta.itemsPerPage || 10;\r\n                    this.totalPages = result.meta.totalPages || 0;\r\n                } else {\r\n                    console.error('Error fetching data:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n\r\n        getUrlForTab(tab, page) {\r\n            const baseUrl = `${window.location.origin}/order/table/${this.projectID}`;\r\n            const sortDirection = this.sortAsc ? 'asc' : 'desc'; \r\n            switch (tab) {\r\n                case 'all':\r\n                    return `${baseUrl}/all/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'completed':\r\n                    return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'processing':\r\n                    return `${baseUrl}/processing/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'pending':\r\n                    return `${baseUrl}/pending/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'cancelled':\r\n                    return `${baseUrl}/cancelled/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                default:\r\n                    return `${baseUrl}/completed/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n            }\r\n        },\r\n\r\n        selectTab(tab) {\r\n            this.currentTab = tab;\r\n            this.currentPage = 1;\r\n            this.fetchOrders(this.currentPage);\r\n        },\r\n\r\n        selectAll() {\r\n            this.selectedOrders = this.selectAllCheckbox ? this.orders.map(order => order.orderId) : [];\r\n        },\r\n\r\n        sortTable(key) {\r\n            if (this.sortKey === key) {\r\n                this.sortAsc = !this.sortAsc;\r\n            } else {\r\n                this.sortKey = key;\r\n                this.sortAsc = true;\r\n            }\r\n            this.fetchOrders(this.currentPage);\r\n        },\r\n\r\n        getSortIcon(key) {\r\n            if (this.sortKey !== key) return '';\r\n            return this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';\r\n        },\r\n\r\n        changePage(page) {\r\n            if (page < 1 || page > this.totalPages) return;\r\n            this.fetchOrders(page);\r\n        },\r\n\r\n        get paginatedOrders() {\r\n            return this.orders;\r\n        },\r\n\r\n        get currentPageStart() {\r\n            return (this.currentPage - 1) * this.itemsPerPage + 1;\r\n        },\r\n\r\n        get currentPageEnd() {\r\n            return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\r\n        },\r\n\r\n        get pageNumbers() {\r\n            const range = 2;\r\n            let start = Math.max(1, this.currentPage - range);\r\n            let end = Math.min(this.totalPages, this.currentPage + range);\r\n\r\n            if (this.totalPages - end < range) {\r\n                end = this.totalPages;\r\n                start = Math.max(1, end - 2 * range);\r\n            } else if (start <= range) {\r\n                start = 1;\r\n                end = Math.min(this.totalPages, start + 2 * range);\r\n            }\r\n\r\n            return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n        },\r\n\r\n        badgeClass(status) {\r\n            const baseClass = 'badge bg-body-secondary badge-custom';\r\n            switch (status) {\r\n                case 'pending':\r\n                    return `${baseClass} text-warning`;\r\n                case 'completed':\r\n                    return `${baseClass} text-success`;\r\n                case 'cancelled':\r\n                    return `${baseClass} text-danger`;\r\n                case 'processing':\r\n                    return `${baseClass} text-warning`;\r\n                default:\r\n                    return baseClass;\r\n            }\r\n        },\r\n\r\n        async applyAction() {\r\n            this.loading = true;\r\n            this.errorMessage = \"\"; \r\n            this.showDropdown = false; \r\n\r\n            const selectedOrderIds = this.selectedOrders.join(',');\r\n            if (!selectedOrderIds || !this.selectedStatus) {\r\n                this.errorMessage = 'Please select at least one order and a status.';\r\n                this.loading = false;\r\n                this.showDropdown = true;\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(`/order/bulk-action/${this.projectID}`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        status: this.selectedStatus,\r\n                        orders: selectedOrderIds.split(','),\r\n                    }),\r\n                });\r\n                const result = await response.json();\r\n\r\n                if (response.ok) {\r\n                    this.fetchOrders(this.currentPage);\r\n                    console.log('Bulk action successful:', result);\r\n                } else {\r\n                    this.errorMessage = result.message || 'An error occurred while processing the request.';\r\n                }\r\n            } catch (error) {\r\n                console.error('Error during bulk action:', error);\r\n                this.errorMessage = 'An error occurred while processing the request.';\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n\r\n        loadModalData(order) {\r\n            this.modalOrder = {\r\n                ...this.modalOrder,\r\n                ...order,\r\n                billing: { ...this.modalOrder.billing, ...order.billing },\r\n                shipping: { ...this.modalOrder.shipping, ...order.shipping }\r\n            };\r\n            this.showModal = true;\r\n        },\r\n\r\n        closeModal() {\r\n            this.showModal = false;\r\n            this.modalOrder = {\r\n                billing: { ...this.modalOrder.billing },\r\n                shipping: { ...this.modalOrder.shipping },\r\n                products: [],\r\n                payment_method: '',\r\n\t\t\t\t,customer_note:''\r\n            };\r\n        }\r\n    };\r\n}\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
