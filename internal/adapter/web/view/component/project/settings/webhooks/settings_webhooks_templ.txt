<div id=\"dashboard-content\" class=\"flex-fill overflow-y-lg-auto scrollbar bg-body rounded-top-4 rounded-top-start-lg-4 rounded-top-end-lg-0 border-top border-lg shadow-2\"><main class=\"container-fluid px-3 py-5 p-lg-6 p-xxl-8\">
<div id=\"dashboard-order-table\" x-data=\"
\" x-init=\"init()\"><div class=\"border-top\"><div class=\"d-flex gap-2 py-3 px-7 border-bottom\"><div class=\"dropdown\" x-data=\"{ showDropdown: false }\" @click.outside=\"showDropdown = false\"><button class=\"btn btn-sm btn-neutral dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton2\" @click=\"showDropdown = !showDropdown\" :aria-expanded=\"showDropdown.toString()\"><i class=\"bi bi-plus-circle\"></i> <span class=\"ms-2\">Bulk Action</span></button><div class=\"dropdown-menu\" :class=\"{ &#39;show&#39;: showDropdown }\" aria-labelledby=\"dropdownMenuButton2\"><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusactive\" value=\"active\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusTodo\">Change status to <strong>Active</strong></label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statupaused\" value=\"paused\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusInProgress\">Change status to <strong>Paused</strong></label></div></div><div class=\"dropdown-item py-1 px-2 d-flex align-items-center\"><div class=\"text-lg\"><input class=\"form-check-input\" type=\"radio\" name=\"statusOption\" id=\"statusdisabled\" value=\"disabled\" x-model=\"selectedStatus\"></div><div class=\"ms-3 me-5\"><label for=\"statusDone\">Change status to <strong>Disabled</strong></label></div></div><!-- Add other status options here --><div class=\"mt-3\"><button type=\"button\" class=\"btn btn-sm btn-primary d-sm-inline-flex position-relative\" @click=\"applyAction\"><span x-show=\"!loading\">Apply </span> <span x-show=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> <i class=\"px-3 bi bi-arrow-right\"></i></button></div><div class=\"mt-3\"><div x-show=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\"><span x-text=\"errorMessage\"></span></div></div></div></div><div class=\"hstack gap-2 ms-auto\"><button x-show=\"webhooks.length &gt; 0\" data-bs-target=\"#deleteProjectModal\" data-bs-toggle=\"modal\" class=\"btn btn-sm btn-danger\"><span id=\"spinner\" class=\"htmx-indicator spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Delete All</button> <button x-show=\"webhooks.length === 0\" data-bs-toggle=\"modal\" data-bs-target=\"#createWebhookModal\" class=\"btn btn-sm btn-primary\"><span id=\"spinner2\" class=\"htmx-indicator spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> <i class=\"bi bi-plus-circle\"></i> Create Webhooks</button><!-- Delete All Button (visible when webhooks exist) --></div></div><div class=\"table-responsive\"><table class=\"table table-hover table-nowrap\"><thead><tr><th><div class=\"text-base\"><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" @change=\"selectAll()\" x-model=\"selectAllCheckbox\"></div></div></th><th @click=\"sortTable(&#39;webhookId&#39;)\">Webhook ID <i :class=\"getSortIcon(&#39;webhookId&#39;)\"></i></th><th @click=\"sortTable(&#39;event&#39;)\">Event <i :class=\"getSortIcon(&#39;event&#39;)\"></i></th><th @click=\"sortTable(&#39;status&#39;)\">Status <i :class=\"getSortIcon(&#39;status&#39;)\"></i></th></tr></thead> <tbody><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"8\">No webhook found.</td></tr></template><template x-for=\"webhook in paginatedwebhooks\" :key=\"webhook.id\"><tr><td><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" :value=\"webhook.id\" x-model=\"selectedwebhooks\"></div></td><td x-text=\"webhook.webhookId\"></td><td x-text=\"webhook.event\"></td><td><span :class=\"badgeClass(webhook.status)\" x-text=\"webhook.status\"></span></td></tr></template><template x-for=\"i in 12 - paginatedwebhooks.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"5\" class=\"py-7\"></td></tr></template></tbody></table></div>
</div></div><div class=\"modal fade\" id=\"deleteProjectModal\" tabindex=\"-1\" aria-labelledby=\"deleteProjectModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog modal-dialog-centered\"><div class=\"modal-content overflow-hidden\"><div class=\"modal-header pb-0 border-0\"><h1 class=\"modal-title h4\" id=\"deleteProjectModalLabel\">Delete Webhooks</h1><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body p-0\"><div class=\"px-6 py-5 border-bottom\"><h3 class=\"modal-title h4\" id=\"deleteProjectModalLabel\">Are you sure you want to delete all  Webhooks? You will bot be able to get updateds from your e-commerce</h3></div><div class=\"px-6 py-5 bg-body-secondary d-flex justify-content-center\"><button type=\"submit\" hx-delete=\"
\" class=\"btn btn-sm btn-danger\" hx-target=\"#dashboard-content\" data-bs-dismiss=\"modal\" aria-label=\"Close\" hx-indicator=\"#spinner\">Delete </button></div></div></div></div></div><div class=\"modal fade\" id=\"createWebhookModal\" tabindex=\"-1\" aria-labelledby=\"createWebhookModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog modal-dialog-centered\"><div class=\"modal-content overflow-hidden\"><div class=\"modal-header pb-0 border-0\"><h1 class=\"modal-title h4\" id=\"createWebhookModalLabel\">Create Webhooks</h1><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body p-0\"><div class=\"px-6 py-5 border-bottom\"><h3 class=\"modal-title h4\" id=\"createWebhookModalLabel\">This will create a webhook for all events for your project. You will be able to see the webhook in the webhook section.</h3></div><div class=\"px-6 py-5 bg-body-secondary d-flex justify-content-center\"><button type=\"submit\" hx-get=\"
\" class=\"btn btn-sm btn-dark\" hx-target=\"#dashboard-content\" data-bs-dismiss=\"modal\" aria-label=\"Close\" hx-indicator=\"#spinner2\">Create Webhooks</button></div></div></div></div></div></main><script>\r\n\t\tfunction webhookTable(projectId) {\r\n\t\t\treturn {\r\n\t\t\t\tprojectID: projectId,\r\n\t\t\t\tcurrentTab: 'all',\r\n\t\t\t\twebhooks: [],\r\n\t\t\t\tselectedwebhooks: [],\r\n\t\t\t\tselectAllCheckbox: false,\r\n\t\t\t\tsortKey: 'event',\r\n\t\t\t\tsortAsc: false,\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\titemsPerPage: 12,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\ttotalPages: 0,\r\n\t\t\t\tloading: false,\r\n\t\t\t\tshowUI: false,\r\n\t\t\t\terrorMessage: '',\r\n\r\n\t\t\t\tasync init() {\r\n\t\t\t\t\tawait this.fetchwebhooks(this.currentPage);\r\n\t\t\t\t\t// this.showUI = true; // Show UI after the delay\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync fetchwebhooks(page = 1) {\r\n\t\t\t\t\tthis.loading = true;\r\n\t\t\t\t\ttry {\r\n\r\n\t\t\t\t\t\tconst url = this.getUrlForTab(this.currentTab, page);\r\n\t\t\t\t\t\tconst response = await fetch(url);\r\n\t\t\t\t\t\tconst result = await response.json();\r\n\t\t\t\t\t\tif (response.ok) {\r\n\t\t\t\t\t\t\tthis.webhooks = result.data || [];\r\n\t\t\t\t\t\t\tthis.totalItems = result.meta.totalItems || 0;\r\n\t\t\t\t\t\t\tthis.currentPage = result.meta.currentPage || 1;\r\n\t\t\t\t\t\t\tthis.itemsPerPage = result.meta.itemsPerPage || 10;\r\n\t\t\t\t\t\t\tthis.totalPages = result.meta.totalPages || 0;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.error('Error fetching data:', result.message);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.error('Error fetching data:', error);\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tgetUrlForTab(tab, page) {\r\n\t\t\t\t\tconst baseUrl = `${window.location.origin}/webhook/table/${this.projectID}`;\r\n\t\t\t\t\tconst sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction\r\n\t\t\t\t\tswitch (tab) {\r\n\t\t\t\t\t\tcase 'all':\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t\tcase 'completed':\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t\tcase 'processing':\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t\tcase 'pending':\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t\tcase 'cancelled':\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tselectTab(tab) {\r\n\t\t\t\t\tthis.currentTab = tab;\r\n\t\t\t\t\tthis.currentPage = 1; // Reset to first page\r\n\t\t\t\t\tthis.fetchwebhooks(this.currentPage);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tselectAll() {\r\n\t\t\t\t\tthis.selectedwebhooks = this.selectAllCheckbox ? this.webhooks.map(d => d.id) : [];\r\n\t\t\t\t},\r\n\t\t\t\tsortTable(key) {\r\n\t\t\t\t\tif (this.sortKey === key) {\r\n\t\t\t\t\t\t// Toggle sort direction if the same column is clicked\r\n\t\t\t\t\t\tthis.sortAsc = !this.sortAsc;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Set new sort key and default to ascending order\r\n\t\t\t\t\t\tthis.sortKey = key;\r\n\t\t\t\t\t\tthis.sortAsc = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Sort the fetched webhook data locally\r\n\t\t\t\t\tthis.webhooks = this.webhooks.sort((a, b) => {\r\n\t\t\t\t\t\tlet valueA = a[key];\r\n\t\t\t\t\t\tlet valueB = b[key];\r\n\r\n\t\t\t\t\t\t// Handle different data types (string, number, etc.)\r\n\t\t\t\t\t\tif (typeof valueA === 'string') {\r\n\t\t\t\t\t\t\tvalueA = valueA.toLowerCase(); // Make string comparisons case-insensitive\r\n\t\t\t\t\t\t\tvalueB = valueB.toLowerCase();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.sortAsc) {\r\n\t\t\t\t\t\t\treturn valueA > valueB ? 1 : valueA < valueB ? -1 : 0;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn valueA < valueB ? 1 : valueA > valueB ? -1 : 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tgetSortIcon(key) {\r\n\t\t\t\t\tif (this.sortKey !== key) return '';\r\n\t\t\t\t\treturn this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';\r\n\t\t\t\t},\r\n\r\n\t\t\t\tchangePage(page) {\r\n\t\t\t\t\tif (page < 1 || page > this.totalPages) return;\r\n\t\t\t\t\tthis.fetchwebhooks(page);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tget paginatedwebhooks() {\r\n\t\t\t\t\treturn this.webhooks;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tget currentPageStart() {\r\n\t\t\t\t\treturn (this.currentPage - 1) * this.itemsPerPage + 1;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tget currentPageEnd() {\r\n\t\t\t\t\treturn Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\r\n\t\t\t\t},\r\n\t\t\t\tget pageNumbers() {\r\n\t\t\t\t\tconst range = 2; // Number of pages to show around the current page\r\n\t\t\t\t\tlet start = Math.max(1, this.currentPage - range);\r\n\t\t\t\t\tlet end = Math.min(this.totalPages, this.currentPage + range);\r\n\r\n\t\t\t\t\t// Adjust range if there are not enough pages on one side\r\n\t\t\t\t\tif (this.totalPages - end < range) {\r\n\t\t\t\t\t\tend = this.totalPages;\r\n\t\t\t\t\t\tstart = Math.max(1, end - 2 * range);\r\n\t\t\t\t\t} else if (start <= range) {\r\n\t\t\t\t\t\tstart = 1;\r\n\t\t\t\t\t\tend = Math.min(this.totalPages, start + 2 * range);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n\t\t\t\t},\r\n\t\t\t\tbadgeClass(status) {\r\n\t\t\t\t\tconst baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class\r\n\t\t\t\t\tswitch (status) {\r\n\t\t\t\t\t\tcase 'paused':\r\n\t\t\t\t\t\t\treturn `${baseClass} text-warning`;\r\n\t\t\t\t\t\tcase 'active':\r\n\t\t\t\t\t\t\treturn `${baseClass} text-success`;\r\n\t\t\t\t\t\tcase 'disabled':\r\n\t\t\t\t\t\t\treturn `${baseClass} text-danger`;\r\n\t\t\t\t\t\tcase 'paused':\r\n\t\t\t\t\t\t\treturn `${baseClass} text-warning`;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn baseClass;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tasync applyAction() {\r\n\t\t\t\t\tthis.loading = true;\r\n\t\t\t\t\tthis.errorMessage = \"\"; // Clear previous error message\r\n\t\t\t\t\tthis.showDropdown = true; // Close dropdown on action\r\n\r\n\t\t\t\t\tconst selectedOrderIds = this.selectedOrders.join(',');\r\n\t\t\t\t\tif (!selectedOrderIds || !this.selectedStatus) {\r\n\t\t\t\t\t\tthis.errorMessage = 'Please select at least one order and a status.';\r\n\t\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t\t\tthis.showDropdown = true;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst response = await fetch(`/webhook/bulk-action/${this.projectID}`, {\r\n\t\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\t\t\tstatus: this.selectedStatus,\r\n\t\t\t\t\t\t\t\twebhooks: selectedOrderIds.split(','),\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tconst result = await response.json();\r\n\r\n\t\t\t\t\t\tif (response.ok) {\r\n\t\t\t\t\t\t\t// Handle success (e.g., show a success message or refresh the table)\r\n\t\t\t\t\t\t\tthis.fetchOrders(this.currentPage);\r\n\t\t\t\t\t\t\tconsole.log('Bulk action successful:', result);\r\n\t\t\t\t\t\t\tthis.showDropdown = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.errorMessage = result.message || 'An error occurred while processing the request.';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.error('Error during bulk action:', error);\r\n\t\t\t\t\t\tthis.errorMessage = 'An error occurred while processing the request.';\r\n\t\t\t\t\t\tthis.showDropdown = true;\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tthis.loading = false;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tasync createWebhooks() {\r\n\t\t\t\t\t// Logic for creating a new webhook (could be a form, modal, or redirection)\r\n\t\t\t\t\tconsole.log(\"Redirecting to create webhooks...\");\r\n\t\t\t\t\twindow.location.href = `/webhooks/create/${this.projectID}`;  // Example: Redirecting to a webhook creation page\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t</script></div>
