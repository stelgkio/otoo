// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.513
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	l "github.com/stelgkio/otoo/internal/adapter/web/view/component/project/list"
	t "github.com/stelgkio/otoo/internal/adapter/web/view/component/project/template"
	"github.com/stelgkio/otoo/internal/core/domain"
)

func ProjectDashboard(projects []*domain.Project, user *domain.User) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Err = l.ProjectListPage(projects).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" <script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var3 := `
	    var chartElement2= document.querySelector("#chart-users");   
        var options2= {
            chart: {
                type: "bar",
                stacked: true,
                zoom: {
                    enabled: false
                },
                toolbar: {
                    show: false
                },
                shadow: {
                    enabled: false
                },
                offsetX: 0,
                animations: {
                    enabled: false,
                    easing: "easeinout",
                    speed: 800,
                    animateGradually: {
                        enabled: true,
                        delay: 150
                    },
                    dynamicAnimation: {
                        enabled: true,
                        speed: 350
                    }
                },
                fontFamily: "#333",
				height: 390,
            },
            colors: [ '#8957ff', '#ffc107', '#dc3545'],
            plotOptions: {
                bar: {
                    columnWidth: "23px",
                    borderRadius: 2
                }
            },
            stroke: {
                width: 4,
                curve: "smooth"
            },
            series: [{
                name: "Revenue",
                data: [30, 10, 20, 10, 17, 12, 8, 20]
            }],
            markers: {
                size: 0
            },
            xaxis: {
				  axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                },
                categories: ["May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                labels: {
                    style: {
                         colors: "#e3dede",
                        fontSize: "13px"
                    }
                }
            },
            yaxis: {
                labels: {
                    style: {
                        colors: "#e3dede",
                        fontSize: "13px"
                    }
                }
            },
            legend: {
                show: false
            },
            grid: {
                borderColor: "#999",
                strokeDashArray: 3
            },
            dataLabels: {
                enabled: false
            },
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function (val) {
                        return val.toFixed(0) + " orders";
                    }
                }
            },
            responsive: [{
                breakpoint: 364,
                options: {
                    plotOptions: {
                        bar: {
                            columnWidth: "30px",
                            borderRadius: 2
                        }
                    }
                }
            }]
		}
        

     

       var barChart = new ApexCharts(chartElement2, options2);
        barChart.render();

 


	`
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var3)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = t.ProjectTemplate(user).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
