package views

import (
	"fmt"
	w "github.com/stelgkio/otoo/internal/core/domain/woocommerce"
)

templ WebhooksProgressDone(projectId string, webhooks []w.WebhookRecord, hasError bool) {
	<div
		id="dashboard-content"
		class="flex-fill overflow-y-lg-auto scrollbar bg-body rounded-top-4 rounded-top-start-lg-4 rounded-top-end-lg-0 border-top border-lg shadow-2"
	>
		<main class="container-fluid px-3 py-5 p-lg-6 p-xxl-8">
			<header class="py-4 border-bottom">
				<div class="row align-items-center">
					<div class="col">
						<div class="d-flex align-items-center gap-4">
							if hasError {
								<div>
									<button
										type="button"
										class="btn-close text-xs"
										aria-label="Close"
										hx-get={ fmt.Sprintf("project/%s", projectId) }
										hx-target="#dashboard-content"
									></button>
								</div>
							}
							<h1 class="h4 ls-tight">Create Webhooks</h1>
						</div>
					</div>
				</div>
			</header>
			<div class="card">
				<div class="card-header py-3">
					<div class="d-flex align-items-center">
						<h5>In progress</h5>
						<div class="hstack gap-3 ms-auto">
							<div>
								if !hasError {
									<span class="badge bg-success-subtle text-success">Completed</span>
								} else {
									<span class="badge bg-danger-subtle text-danger">Has error</span>
								}
							</div>
						</div>
					</div>
				</div>
				<div class="card-body py-0">
					<div class="list-group list-group-flush mb-5">
						<div class="list-group-item py-3">
							<div class="row g-3 align-items-center">
								for _, item := range webhooks {
									<div class="col-sm-6 col-12 d-flex">
										<div class="form-check form-check-linethrough d-flex align-items-center gap-1">
											<input
												class="form-check-input w-rem-5 h-rem-5 mt-0 rounded-circle border-dashed flex-none"
												type="checkbox"
												id="check-in-progress-1"
												disabled
											/>
											<a
												href="#offcanvasCreate"
												class="form-check-label fw-normal text-heading text-primary-hover ms-2"
												data-bs-toggle="offcanvas"
											>
												{ TitleCase(item.Event) }
											</a>
										</div>
									</div>
									<div class="col-sm-auto col-12 ms-sm-auto">
										<div class="hstack gap-5 justify-content-end">
											if item.Error == "" {
												<div><span class="badge bg-success-subtle text-success">Success</span></div>
												<div class="position-relative text-sm">
													<i
														class="bi bi-check-circle-fill text-success"
													></i>
												</div>
											} else {
												<div><span class="badge bg-danger-subtle text-danger">Error</span></div>
												<div class="position-relative text-sm">
													<i
														class="bi bi-check-circle-fill text-danger"
													></i>
												</div>
											}
										</div>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
			<form autocomplete="off">
				<hr class="my-6"/>
				<div class="d-flex justify-content-start gap-2">
					<button type="button" class="btn btn-sm btn-neutral" hx-get="/project/list" hx-target="#dashboard-content">Cancel</button>
				</div>
				<div class="d-flex justify-content-end gap-2">
					<button type="submit" hx-get={ fmt.Sprintf("/project/synchronize/%s", projectId) } hx-indicator="#spinner" class="btn btn-sm btn-primary" hx-target="#dashboard-content">
						<span id="spinner" class="htmx-indicator spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
						Next
					</button>
				</div>
			</form>
		</main>
	</div>
}
