// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
)

func CustomerTable(projectId string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"dashboard-order-table\" x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("customerTable('%s')", projectId))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/adapter/web/view/dashboard/customer/table/customer_table.templ`, Line: 9, Col: 87}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" x-init=\"init()\"><div class=\"row align-items-center g-6 mt-0 mb-6\"><div class=\"col-sm-6\"><div class=\"d-flex gap-2\"><div class=\"input-group input-group-sm input-group-inline w-100 w-md-50\"><span class=\"input-group-text\"><i class=\"bi bi-search me-2\"></i></span> <input type=\"search\" class=\"form-control ps-0\" placeholder=\"Search all customers\" aria-label=\"Search\"></div></div></div></div><div class=\"border-top\"><div class=\"table-responsive\"><table class=\"table table-hover table-nowrap\"><thead><tr><th scope=\"col\">Name</th><th @click=\"sortTable(&#39;email&#39;)\">Email <i :class=\"getSortIcon(&#39;email&#39;)\"></i></th><th @click=\"sortTable(&#39;order_count&#39;)\">Total Orders <i :class=\"getSortIcon(&#39;order_count&#39;)\"></i></th><th scope=\"col\">Money Spend</th></tr></thead> <tbody><template x-if=\"!loading &amp;&amp; totalItems === 0\"><tr><td colspan=\"8\">No customer found.</td></tr></template><template x-for=\"customer in paginatedCustomers\" :key=\"customer.id\"><tr><td x-text=\"customer.name\"></td><td x-text=\"customer.email\"></td><td x-text=\"customer.totalOrders\"></td><td x-text=\"customer.totalSpent\"></td></tr></template><template x-for=\"i in 10 - paginatedCustomers.length\" :key=\"&#39;empty&#39; + i\"><tr><td colspan=\"5\" class=\"py-7\"></td></tr></template></tbody></table></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = p.PaginationControl().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div><script>\r\nfunction customerTable(projectId) {\r\n    return {\r\n\t\tprojectID: projectId,\r\n        currentTab: 'all',\r\n        customers: [],\r\n        selectedcustomers: [],\r\n        selectAllCheckbox: false,\r\n        sortKey: 'order_count',\r\n        sortAsc: false,\r\n        currentPage: 1,\r\n        itemsPerPage: 10,\r\n        totalItems: 0,\r\n        totalPages: 0,\r\n        loading: false,\r\n\r\n        async init() {\r\n            await this.fetchcustomers(this.currentPage);\r\n        },\r\n\r\n        async fetchcustomers(page = 1) {\r\n            this.loading = true;\r\n            try {\r\n                const url = this.getUrlForTab(this.currentTab, page);\r\n                const response = await fetch(url);\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    this.customers = result.data || [];\r\n                    this.totalItems = result.meta.totalItems || 0;\r\n                    this.currentPage = result.meta.currentPage || 1;\r\n                    this.itemsPerPage = result.meta.itemsPerPage || 10;\r\n                    this.totalPages = result.meta.totalPages || 0;\r\n                } else {\r\n                    console.error('Error fetching data:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n\r\n         getUrlForTab(tab, page) {\r\n            const baseUrl = `${window.location.origin}/customer/table/${this.projectID}`;\r\n            const sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction\r\n            switch (tab) {\r\n                case 'all':\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'completed':\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'processing':\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'pending':\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                case 'cancelled':\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n                default:\r\n                    return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;\r\n            }\r\n        },\r\n\r\n        selectTab(tab) {\r\n            this.currentTab = tab;\r\n            this.currentPage = 1; // Reset to first page\r\n            this.fetchcustomers(this.currentPage);\r\n        },\r\n\r\n        selectAll() {\r\n            this.selectedcustomers = this.selectAllCheckbox ? this.customers.map(order => order.orderId) : [];\r\n        },\r\n\r\n      \tsortTable(key) {\r\n            if (this.sortKey === key) {\r\n                this.sortAsc = !this.sortAsc; // Toggle sort direction if the same column is clicked\r\n            } else {\r\n                this.sortKey = key; // Set new sort key\r\n                this.sortAsc = true; // Default to ascending if a new column is selected\r\n            }\r\n            this.fetchcustomers(this.currentPage); // Fetch sorted data\r\n        },\r\n\t\tgetSortIcon(key) {\r\n            if (this.sortKey !== key) return '';\r\n            return this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';\r\n        },\r\n\r\n        changePage(page) {\r\n            if (page < 1 || page > this.totalPages) return;\r\n            this.fetchcustomers(page);\r\n        },\r\n\r\n        get paginatedCustomers() {\r\n            return this.customers;\r\n        },\r\n\r\n        get currentPageStart() {\r\n            return (this.currentPage - 1) * this.itemsPerPage + 1;\r\n        },\r\n\r\n        get currentPageEnd() {\r\n            return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\r\n        },\r\n       \tget pageNumbers() {\r\n            const range = 2; // Number of pages to show around the current page\r\n            let start = Math.max(1, this.currentPage - range);\r\n            let end = Math.min(this.totalPages, this.currentPage + range);\r\n\r\n            // Adjust range if there are not enough pages on one side\r\n            if (this.totalPages - end < range) {\r\n                end = this.totalPages;\r\n                start = Math.max(1, end - 2 * range);\r\n            } else if (start <= range) {\r\n                start = 1;\r\n                end = Math.min(this.totalPages, start + 2 * range);\r\n            }\r\n\t\t\t\r\n            return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n        },\r\n\t\t badgeClass(status) {\r\n\t\t\t\tconst baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class\r\n\t\t\t\tswitch (status) {\r\n\t\t\t\t\tcase 'pending':\r\n\t\t\t\t\t\treturn `${baseClass} text-warning`;\r\n\t\t\t\t\tcase 'completed':\r\n\t\t\t\t\t\treturn `${baseClass} text-success`;\r\n\t\t\t\t\tcase 'cancelled':\r\n\t\t\t\t\t\treturn `${baseClass} text-danger`;\r\n\t\t\t\t\tcase 'processing':\r\n\t\t\t\t\t\treturn `${baseClass} text-warning`;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn baseClass;\r\n\t\t\t\t}\r\n\t\t}\t\t\r\n    };\r\n}\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
