package views

import (
	"fmt"
	"github.com/stelgkio/otoo/internal/core/domain"
)

templ CreateVoucher(extensions []*domain.ProjectExtension, projectId string) {
	<div
		class="offcanvas offcanvas-end w-100 w-md-75 w-lg-50"
		data-bs-backdrop="true"
		tabindex="-1"
		id="orderProcessingOffcanvas"
		x-data={ fmt.Sprintf("createVoucher('%s')", projectId) }
		x-init="init()"
		:class="{ 'show': showOffcanvas }"
		:style="{ visibility: showOffcanvas ? 'visible' : 'hidden' }"
		@show-offcanvas.window="openOffcanvas($event.detail.voucher)"
	>
		<div class="offcanvas-header">
			<h5 class="offcanvas-title" id="orderProcessingOffcanvasLabel" data-i18n="offcanvas-order_processing">
				<i class="bi bi-pencil-square"></i>Order Processing #<span x-text="voucher_object.orderId"></span>
			</h5>
			<button type="button" class="btn-close" @click="closeOffcanvas()"></button>
		</div>
		<div class="offcanvas-body d-flex flex-column">
			<!-- Tabs -->
			<ul class="nav nav-tabs" id="orderTabs" role="tablist">
				<li class="nav-item" role="presentation">
					<button
						class="nav-link active"
						id="customer-tab"
						data-bs-toggle="tab"
						data-bs-target="#customer-info"
						type="button"
						role="tab"
						@click="setActiveTab('customer')"
					>
						<i class="bi bi-person"></i> Customer
					</button>
				</li>
				<li class="nav-item" role="presentation">
					<button
						class="nav-link"
						id="shipping-tab"
						data-bs-toggle="tab"
						data-bs-target="#shipping-info"
						type="button"
						role="tab"
						@click="setActiveTab('shipping')"
					>
						<i class="bi bi-truck"></i> Shipping
					</button>
				</li>
			</ul>
			<!-- Tab Content -->
			<div class="tab-content flex-grow-1 overflow-auto" id="orderTabContent">
				<!-- Customer Information Tab -->
				<div class="tab-pane fade show active" id="customer-info" role="tabpanel">
					<div class="p-3">
						<div class="card mb-3 shadow-sm">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-customer-info-header">
									<i class="bi bi-person"></i> Customer Info
								</h6>
							</div>
							<div class="card-body">
								<div class="row g-2">
									<!-- First Name -->
									<div class="col-md-6">
										<label for="customerName" class="form-label small">First Name</label>
										<input
											type="text"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.first_name'] }"
											id="customerName"
											x-model="voucher_object.billing.first_name"
											@blur="validateField('billing.first_name')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.first_name']"></div>
									</div>
									<!-- Last Name -->
									<div class="col-md-6">
										<label for="customerSurname" class="form-label small">Last Name</label>
										<input
											type="text"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.last_name'] }"
											id="customerSurname"
											x-model="voucher_object.billing.last_name"
											@blur="validateField('billing.last_name')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.last_name']"></div>
									</div>
									<!-- Email -->
									<div class="col-md-6">
										<label for="customerEmail" class="form-label small">Email</label>
										<input
											type="email"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.email'] }"
											id="customerEmail"
											x-model="voucher_object.billing.email"
											@blur="validateField('billing.email')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.email']"></div>
									</div>
									<!-- Phone -->
									<div class="col-md-6">
										<label for="customerPhone" class="form-label small">Phone</label>
										<input
											type="tel"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.phone'] }"
											id="customerPhone"
											x-model="voucher_object.billing.phone"
											@blur="validateField('billing.phone')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.phone']"></div>
									</div>
									<!-- Address -->
									<div class="col-12">
										<label for="customerAddress" class="form-label small">Address</label>
										<div class="input-group input-group-sm">
											<span class="input-group-text">
												<i class="bi bi-geo-alt"></i>
											</span>
											<input
												type="text"
												class="form-control form-control-sm"
												:class="{ 'is-invalid': errors['billing.address_1'] }"
												id="customerAddress"
												x-model="voucher_object.billing.address_1"
												@blur="validateField('billing.address_1')"
											/>
											<div class="invalid-feedback" x-text="errors['billing.address_1']"></div>
										</div>
									</div>
									<!-- City -->
									<div class="col-md-6">
										<label for="customerCity" class="form-label small">City</label>
										<input
											type="text"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.city'] }"
											id="customerCity"
											x-model="voucher_object.billing.city"
											@blur="validateField('billing.city')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.city']"></div>
									</div>
									<!-- Postal Code -->
									<div class="col-md-6">
										<label for="customerPostalCode" class="form-label small">Postal Code</label>
										<input
											type="text"
											class="form-control form-control-sm"
											:class="{ 'is-invalid': errors['billing.postcode'] }"
											id="customerPostalCode"
											x-model="voucher_object.billing.postcode"
											@blur="validateField('billing.postcode')"
										/>
										<div class="invalid-feedback" x-text="errors['billing.postcode']"></div>
									</div>
								</div>
							</div>
						</div>
						<!-- Section for Products -->
						<div class="card mb-3 shadow-sm">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-customer-products-header">
									<i class="bi bi-box-seam"></i> Products
								</h6>
							</div>
							<div class="card-body">
								<div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
									<table class="table table-sm">
										<thead>
											<tr>
												<th data-i18n="off-canvas-customer-product-name">Product</th>
												<th data-i18n="off-canvas-customer-product-quantity">Quantity</th>
												<th data-i18n="off-canvas-customer-product-price">Price</th>
											</tr>
										</thead>
										<tbody>
											<template x-for="product in voucher_object.products" :key="product.id">
												<tr>
													<td x-text="product.name"></td>
													<td x-text="product.quantity"></td>
													<td x-text="product.price"></td>
												</tr>
											</template>
										</tbody>
									</table>
								</div>
							</div>
						</div>
						<!-- Section for Delivery Instructions -->
						<div class="card mb-3 shadow-sm">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-delivery-info">
									<i class="bi bi-chat-right-text"></i> Delivery Info
								</h6>
							</div>
							<div class="card-body">
								<textarea class="form-control form-control-sm" id="deliveryInstructions" rows="2" data-i18n="[placeholder]off-canvas-special-instructions" x-model="voucher_object.note"></textarea>
							</div>
						</div>
					</div>
				</div>
				<!-- Shipping Information Tab -->
				<div class="tab-pane fade" id="shipping-info" role="tabpanel" aria-labelledby="shipping-tab">
					<div class="p-3">
						<!-- Section for Shipping Information -->
						<div class="card mb-3 shadow-sm">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-shipping-information">
									<i class="bi bi-truck"></i> Shipping Information
								</h6>
							</div>
							<div class="card-body">
								<div class="mb-3">
									<label for="shippingCompany" class="form-label small" data-i18n="off-canvas-shipping-company">Shipping Company</label>
									<select
										class="form-select form-select-sm"
										id="shippingCompany"
										x-model="selectedCourier"
										:class="{ 'is-invalid': errors['shipping.courier'] }"
										@change="validateField('shipping.courier')"
										required
									>
										<option value="" data-i18n="off-canvas-shipping-provider">Select Courier Provider</option>
										for _, extension := range extensions {
											<option value={ extension.Code }>{ extension.Title }</option>
										}
									</select>
									<div class="invalid-feedback" x-text="errors['shipping.courier']"></div>
								</div>
								<div class="mb-3">
									<label for="orderId" class="form-label small" data-i18n="off-canvas-shipping-order-number">Order Number</label>
									<div class="input-group input-group-sm">
										<span class="input-group-text">
											<i class="bi bi-upc-scan"></i>
										</span>
										<input type="text" class="form-control form-control-sm" id="orderId" x-model="voucher_object.orderId" readonly/>
									</div>
								</div>
								<div class="mb-3">
									<label for="parcelWeight" class="form-label small" data-i18n="off-canvas-shipping-parcel-weight">Parcel Weight (kg)</label>
									<div class="input-group input-group-sm">
										<span class="input-group-text">
											<i class="bi bi-body-text"></i>
										</span>
										<input
											type="number"
											class="form-control form-control-sm"
											id="parcelWeight"
											placeholder="0.5"
											step="0.5"
											x-model="voucher_object.shipping.weight"
											:class="{ 'is-invalid': errors['shipping.weight'] }"
											@blur="validateField('shipping.weight')"
											required
										/>
										<div class="invalid-feedback" x-text="errors['shipping.weight']"></div>
									</div>
								</div>
								// COD
								<div class="mb-3">
									<label for="parcelCOD" class="form-label small" data-i18n="off-canvas-shipping-parcle-cod">COD (€)</label>
									<div class="input-group input-group-sm">
										<span class="input-group-text">
											<i class="bi bi-cash"></i>
										</span>
										<input
											type="number"
											class="form-control form-control-sm"
											id="parcelCOD"
											placeholder="0.00"
											step="0.01"
											x-model="voucher_object.shipping.cod"
											:class="{ 'is-invalid': errors['shipping.cod'] }"
											@blur="validateField('shipping.cod')"
											required
										/>
										<div class="invalid-feedback" x-text="errors['shipping.cod']"></div> <!-- Error message display -->
									</div>
								</div>
							</div>
						</div>
						<!-- Section for ACS Courier Options (Conditional) -->
						<div class="card mb-3 shadow-sm" x-show="selectedCourier === 'asc-courier'">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-delivery-options-acs">
									<i class="bi bi-box-arrow-in-down"></i> Delivery Options (ACS)
								</h6>
							</div>
							<div class="card-body">
								<div class="form-check">
									<input
										class="form-check-input"
										type="radio"
										name="deliveryOption"
										id="standardDeliveryACS"
										value="standard"
										x-model="voucher_object.shipping.deliveryOption"
									/>
									<label class="form-check-label" for="standardDelivery" data-i18n="off-canvas-acs-standard-delivery">Standard Delivery</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="radio"
										name="deliveryOption"
										id="saturdayDelivery"
										value="saturday"
										x-model="voucher_object.shipping.deliveryOption"
									/>
									<label class="form-check-label" for="saturdayDelivery" data-i18n="off-canvas-acs-saturday-delivery">Saturday Delivery</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="radio"
										name="deliveryOption"
										id="urgentDelivery"
										value="urgent"
										x-model="voucher_object.shipping.deliveryOption"
									/>
									<label class="form-check-label" for="urgentDelivery" data-i18n="off-canvas-acs-urgent-delivery">Urgent Delivery</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="radio"
										name="deliveryOption"
										id="pickupDelivery"
										value="pickup"
										x-model="voucher_object.shipping.deliveryOption"
									/>
									<label class="form-check-label" for="pickupDelivery" data-i18n="off-canvas-acs-pickup-delivery">Pickup</label>
								</div>
							</div>
						</div>
						<!-- Section for Courier4U Options (Conditional) -->
						<div class="card mb-3 shadow-sm" x-show="selectedCourier === 'courier4u'">
							<div class="card-header">
								<h6 class="mb-0" data-i18n="off-canvas-delivery-options-courier4u">
									<i class="bi bi-box-arrow-in-down"></i> Delivery Options (Courier4U)
								</h6>
							</div>
							<div class="card-body">
								<div class="form-check">
									<input
										class="form-check-input"
										type="checkbox"
										id="standardDeliveryCourier4U"
										x-model="hermes_settings.shipping.deliveryOptions"
										value="standard"
									/>
									<label class="form-check-label" for="standardDeliveryCourier4U" data-i18n="off-canvas-delivery-courier4u-standard-delivery">Standard Delivery</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="checkbox"
										id="saturdayDelivery4u"
										x-model="hermes_settings.shipping.deliveryOptions"
										value="saturday"
									/>
									<label class="form-check-label" for="saturdayDelivery4u" data-i18n="off-canvas-delivery-courier4u-saturday-delivery">
										Saturday Delivery
									</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="checkbox"
										id="urgentDelivery4u"
										x-model="hermes_settings.shipping.deliveryOptions"
										value="urgent"
									/>
									<label class="form-check-label" for="urgentDelivery4u" data-i18n="off-canvas-delivery-courier4u-urgent-delivery">
										Urgent Delivery
									</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="checkbox"
										id="pickupDelivery4u"
										x-model="hermes_settings.shipping.deliveryOptions"
										value="pickup"
									/>
									<label class="form-check-label" for="pickupDelivery4u" data-i18n="off-canvas-delivery-courier4u-pickup-delivery">
										Pickup
									</label>
								</div>
								<div class="form-check">
									<input
										class="form-check-input"
										type="checkbox"
										id="sameDayDelivery4u"
										x-model="hermes_settings.shipping.deliveryOptions"
										value="sameday"
									/>
									<label class="form-check-label" for="sameDayDelivery4u" data-i18n="off-canvas-delivery-courier4u-sameday-delivery">
										Same Day
									</label>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- Save Button -->
			<button
				type="button"
				class="btn btn-primary w-100"
				id="saveBtn"
				@click="handleSubmit()"
				:disabled="!isFormValid() || isSubmitting"
			>
				<template x-if="!isSubmitting">
					<span>Save Changes</span>
				</template>
				<template x-if="isSubmitting">
					<span class="d-flex align-items-center justify-content-center">
						<span class="spinner-border spinner-border-sm me-2" role="status"></span>
						Processing...
					</span>
				</template>
			</button>
		</div>
		<!-- Toast for notifications -->
		<div class="toast-container position-fixed bottom-0 end-0 p-3">
			<div
				id="validationToast"
				class="toast align-items-center text-white border-0"
				:class="toastType"
				role="alert"
				aria-live="assertive"
				aria-atomic="true"
			>
				<div class="d-flex">
					<div class="toast-body" x-text="toastMessage"></div>
					<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
				</div>
			</div>
		</div>
	</div>
	<script>
// Define the main function to manage the order form
function createVoucher(projectID) {
    return {
        // Core UI state
	   	projectId: projectId,  // Store the projectId
        showOffcanvas: false,
        activeTab: 'customer',
        errors: {},
        isSubmitting: false,
        toastMessage: '',
        toastType: 'bg-success',
        selectedCourier: '',

        // Generic voucher data
        voucher_object: {
            orderId: '',
            billing: {
                first_name: '',
                last_name: '',
                email: '',
                phone: '',
                address_1: '',
                city: '',
                postcode: ''
            },
            shipping: {
                first_name: '',
                last_name: '',
                address_1: '',
                city: '',
                postcode: '',
                weight: '',
                courier: '',
                deliveryOption: ''
            },
            products: [],
            note: "",
            payment: {
                cod: ''
            }
        },

        // Hermes-specific data
        hermes_settings: {
            ServiceSavvato: null,
			ServiceEpigon: null,
			ServiceEpistrofi: null,
			ServiceSameday: null,
			ServiceProtocol: null,
			ServiceReception: null,
			ParcelWeight: null,
			ParcelDepth: null,
			ParcelWidth: null,
			ParcelHeight: null
        },

        // Initialize form
        init() {
            console.log('Initializing component with projectId:', this.projectId);
            this.setupValidationWatchers();
            this.initializeBootstrapComponents();
        },

        // Prepare payload for Hermes API
        prepareHermesPayload() {
            return {
                ReceiverName: `${this.voucher_object.shipping.first_name} ${this.voucher_object.shipping.last_name}`,
				ReceiverAddress: this.voucher_object.shipping.address_1,
				ReceiverCity: this.voucher_object.shipping.city,
				ReceiverPostal: parseInt(this.voucher_object.shipping.postcode, 10),
				ReceiverTelephone: this.voucher_object.shipping.phone,
				Notes: this.voucher_object.note,
				OrderID: this.voucher_object.orderId,
				Cod: parseFloat(this.voucher_object.payment.cod),
                
                // Hermes specific services
                ServiceSavvato: this.hermes_settings.ServiceSavvato === '1' ? 1 : null,
				ServiceEpigon: this.hermes_settings.ServiceEpigon === '1' ? 1 : null,
				ServiceEpistrofi: this.hermes_settings.ServiceEpistrofi === '1' ? 1 : null,
				ServiceSameday: this.hermes_settings.ServiceSameday === '1' ? 1 : null,
				ServiceProtocol: this.hermes_settings.ServiceProtocol === '1' ? 1 : null,
				ServiceReception: this.hermes_settings.ServiceReception === '1' ? 1 : null,
                
                // Parcel details
                ParcelWeight: this.hermes_settings.ParcelWeight ? parseFloat(this.hermes_settings.ParcelWeight) : null,
				ParcelDepth: this.hermes_settings.ParcelDepth ? parseFloat(this.hermes_settings.ParcelDepth) : null,
				ParcelWidth: this.hermes_settings.ParcelWidth ? parseFloat(this.hermes_settings.ParcelWidth) : null,
				ParcelHeight: this.hermes_settings.ParcelHeight ? parseFloat(this.hermes_settings.ParcelHeight) : null,
            };
        },

        // Handle form submission
        async handleSubmit() {
            if (!this.validateForm()) {
                this.showToast('Please check the form for errors', 'bg-danger');
                return;
            }

            // Start the submission process
            this.isSubmitting = true;
            try {
               		if (this.selectedCourier === 'courier4u') {
           			const payload = this.prepareHermesPayload();
					

					 // Log the payload for debugging
            			console.log('Full Payload:', payload);
				
                      // Create a full payload that includes billing, shipping, and products
						const fullPayload = {
							...payload,  // Spread the Hermes payload
							billing: this.voucher_object.billing,  // Include billing
							shipping: this.voucher_object.shipping,  // Include shipping
							products: this.voucher_object.products,  // Include products
							payment_method: this.voucher_object.payment_method,  // Include payment method
							customer_note: this.voucher_object.note  // Include customer note
						};

					const response = await fetch(`/voucher/courier4u/create/${this.projectID}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						 body: JSON.stringify(payload) // Use the payload directly
					});

                    if (!response.ok) {
                        const errorData = await response.json();
						console.error('Response Error:', errorData);
						throw new Error('Failed to create voucher: ' + errorData.message || response.statusText);
                    }

                    this.showToast('Voucher created successfully', 'bg-success');
					this.fetchOrders(this.currentPage);
                    this.closeOffcanvas();
                }
            } catch (error) {
                console.error('Error creating voucher:', error);
                this.showToast('Failed to create voucher', 'bg-danger');
            } finally {
                this.isSubmitting = false;
            }
        },

        // Show the order offcanvas and populate data if voucher exists
        openOffcanvas(voucher) {
            console.log('Opening offcanvas with voucher:', voucher);
            console.log('Project ID:', this.projectId);

            // Ensure products is an array in voucher data
            if (!Array.isArray(voucher.products)) {
                voucher.products = [];
            }

            // Merge voucher data into voucher_object
            this.voucher_object = {
                ...this.voucher_object,
                orderId: voucher.orderId,
                billing: { ...this.voucher_object.billing, ...voucher.billing },
                shipping: { ...this.voucher_object.shipping, ...voucher.shipping },
                products: [...voucher.products],
                note: voucher.note
            };

            this.selectedCourier = voucher.shipping?.courier || '';
            this.showOffcanvas = true;
            this.activeTab = 'customer';
            this.errors = {};

            // Initialize Bootstrap offcanvas component if it doesn't exist
            if (!this.offcanvas) {
                this.initializeBootstrapComponents();
            }

            // Show the offcanvas component
            if (this.offcanvas) {
                this.offcanvas.show();
            }
        },

        // Initialize and configure Bootstrap components
        initializeBootstrapComponents() {
            try {
                const offcanvasElement = document.getElementById('orderProcessingOffcanvas');
                if (offcanvasElement && typeof bootstrap !== 'undefined') {
                    // Initialize the offcanvas only if it hasn't been initialized
                    if (!this.offcanvas) {
                        this.offcanvas = new bootstrap.Offcanvas(offcanvasElement, {
                            backdrop: true,
                            keyboard: true
                        });

                        // Set up an event listener to reset the form when offcanvas is closed
                        offcanvasElement.addEventListener('hidden.bs.offcanvas', () => {
                            this.showOffcanvas = false;
                            this.resetForm();
                        });
                    }
                }
            } catch (error) {
                console.error('Error initializing Bootstrap components:', error);
            }
        },

        // Set active tab in the form
        setActiveTab(tab) {
            console.log('Setting active tab:', tab);
            this.activeTab = tab;
        },

        // Set up watchers for validation of form fields
        setupValidationWatchers() {
            try {
                // Watch changes in billing fields
                ['first_name', 'last_name', 'email', 'phone', 'address_1', 'city', 'postcode'].forEach(field => {
                    this.$watch(`voucher_object.billing.${field}`, () => {
                        this.validateField(`billing.${field}`);
                    });
                });

                // Watch changes in shipping fields
                ['first_name', 'last_name', 'address_1', 'city', 'postcode'].forEach(field => {
                    this.$watch(`voucher_object.shipping.${field}`, () => {
                        this.validateField(`shipping.${field}`);
                    });
                });

                // Watch changes in shipping-specific fields
                this.$watch('selectedCourier', () => {
                    this.voucher_object.shipping.courier = this.selectedCourier;
                    this.validateField('shipping.courier');
                });

                this.$watch('voucher_object.shipping.deliveryOption', () => {
                    this.validateField('shipping.deliveryOption');
                });

            } catch (error) {
                console.error('Error setting up validation watchers:', error);
            }
        },

        // Validate individual fields with custom rules
        validateField(field) {
            console.log('Validating field:', field);

            // Get the value of the field to validate
            const value = field.split('.').reduce((obj, key) => obj?.[key], this.voucher_object);
            delete this.errors[field];  // Clear previous errors

            const optionalFields = ['shipping.deliveryOption'];
            if (!value && optionalFields.includes(field)) return true;  // Skip validation for optional fields

            // Basic required field validation
            if (!value?.toString().trim()) {
                this.errors[field] = 'This field is required';
                return false;
            }

            // Specific validations based on field type
            switch (true) {
                case field.endsWith('email'):
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(value)) {
                        this.errors[field] = 'Please enter a valid email address';
                        return false;
                    }
                    break;

                case field.endsWith('phone'):
                    const phoneRegex = /^\+?[\d\s-]{10,}$/;
                    if (!phoneRegex.test(value)) {
                        this.errors[field] = 'Please enter a valid phone number';
                        return false;
                    }
                    break;

                case field.endsWith('postcode'):
                    if (value.length < 5) {
                        this.errors[field] = 'Please enter a valid postcode';
                        return false;
                    }
                    break;

				case field === 'shipping.weight':
                    const weight = parseFloat(value);
                    if (isNaN(weight) || weight <= 0) {
                        this.errors[field] = 'Please enter a valid weight greater than 0';
                        return false;
                    }
                    break;

				case field === 'shipping.cod':
					const codAmount = parseFloat(value);
						if (isNaN(codAmount)) {
								this.errors[field] = 'Please enter a valid COD amount';
								return false;
							}
						if (codAmount < 0) {
								this.errors[field] = 'COD amount cannot be negative';
								return false;
							}
						if (codAmount > 499.99) {
								this.errors[field] = 'COD amount must be less than or equal to 499.99';
								return false;
							}
						break;
							}
            return true; 
        },

        // Validate the entire form before submission
        validateForm() {
            const fieldsToValidate = [
                'billing.first_name', 'billing.last_name', 'billing.email', 'billing.phone', 
                'billing.address_1', 'billing.city', 'billing.postcode',
                'shipping.first_name', 'shipping.last_name', 'shipping.address_1', 
                'shipping.city', 'shipping.postcode', 'shipping.courier', 
                'shipping.deliveryOption'
            ];
            let valid = true;

            fieldsToValidate.forEach(field => {
                valid = this.validateField(field) && valid;  // Combine validation results
            });

            return valid;  // Return overall validation status
        },

        // Reset the form fields and errors
        resetForm() {
            console.log('Resetting form fields');
            this.voucher_object = {
                ...this.voucher_object,
                orderId: '',
                billing: {
                    first_name: '',
                    last_name: '',
                    email: '',
                    phone: '',
                    address_1: '',
                    city: '',
                    postcode: ''
                },
                shipping: {
                    first_name: '',
                    last_name: '',
                    address_1: '',
                    city: '',
                    postcode: '',
                    weight: '',
                    courier: '',
                    deliveryOption: ''
                },
                products: [],
                note: "",
                payment: {
                    cod: ''
                }
            };
            this.errors = {};  // Clear all errors
            this.selectedCourier = '';  // Reset selected courier
        },

        // Display toast notifications
        showToast(message, type) {
            this.toastMessage = message;
            this.toastType = type;

            const toastElement = document.getElementById('toast');
            if (toastElement) {
                const toast = new bootstrap.Toast(toastElement);
                toast.show();  // Show the toast
            }
        },

        // Close the order offcanvas
        closeOffcanvas() {
            if (this.offcanvas) {
                this.offcanvas.hide();
            }
        },
    };
}


</script>
}
