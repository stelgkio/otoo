package views

import (
	"fmt"
	p "github.com/stelgkio/otoo/internal/adapter/web/view/component/pagination"
	h "github.com/stelgkio/otoo/internal/adapter/web/view/component/project/settings/settings_header"
	"github.com/stelgkio/otoo/internal/core/domain"
)

templ SettingsWebhooks(project *domain.Project, projectExtensions []*domain.ProjectExtension) {
	<div
		id="dashboard-content"
		class="flex-fill overflow-y-lg-auto scrollbar bg-body rounded-top-4 rounded-top-start-lg-4 rounded-top-end-lg-0 border-top border-lg shadow-2"
	>
		<main class="container-fluid px-3 py-5 p-lg-6 p-xxl-8">
			@h.SettingsHeader("Project Webhooks", 3, project.Id.String(), projectExtensions)
			<div
				id="dashboard-order-table"
				x-data={ fmt.Sprintf("webhookTable('%s')", project.Id.String()) }
				x-init="init()"
			>
				<div class="border-top">
					<div class="d-flex gap-2 py-3 px-7 border-bottom">
						<div class="dropdown" x-data="{ showDropdown: false }" @click.outside="showDropdown = false">
							<button
								class="btn btn-sm btn-neutral dropdown-toggle"
								type="button"
								id="dropdownMenuButton2"
								@click="showDropdown = !showDropdown"
								:aria-expanded="showDropdown.toString()"
							>
								<i class="bi bi-plus-circle"></i> <span class="ms-2">Bulk Action</span>
							</button>
							<div
								class="dropdown-menu"
								:class="{ 'show': showDropdown }"
								aria-labelledby="dropdownMenuButton2"
							>
								<div class="dropdown-item py-1 px-2 d-flex align-items-center">
									<div class="text-lg">
										<input
											class="form-check-input"
											type="radio"
											name="statusOption"
											id="statusactive"
											value="active"
											x-model="selectedStatus"
										/>
									</div>
									<div class="ms-3 me-5">
										<label for="statusTodo">Change status to <strong>Active</strong></label>
									</div>
									// <div class="ms-auto">
									// <span class="badge rounded-pill bg-opacity-25 bg-success text-success">23</span>
									// </div>
								</div>
								<div class="dropdown-item py-1 px-2 d-flex align-items-center">
									<div class="text-lg">
										<input
											class="form-check-input"
											type="radio"
											name="statusOption"
											id="statupaused"
											value="paused"
											x-model="selectedStatus"
										/>
									</div>
									<div class="ms-3 me-5">
										<label for="statusInProgress">Change status to <strong>Paused</strong></label>
									</div>
								</div>
								<div class="dropdown-item py-1 px-2 d-flex align-items-center">
									<div class="text-lg">
										<input
											class="form-check-input"
											type="radio"
											name="statusOption"
											id="statusdisabled"
											value="disabled"
											x-model="selectedStatus"
										/>
									</div>
									<div class="ms-3 me-5">
										<label for="statusDone">Change status to <strong>Disabled</strong></label>
									</div>
								</div>
								<!-- Add other status options here -->
								<div class="mt-3">
									<button
										type="button"
										class="btn btn-sm btn-primary d-sm-inline-flex position-relative"
										@click="applyAction"
									>
										<span x-show="!loading">Apply </span>
										<span
											x-show="loading"
											class="spinner-border spinner-border-sm"
											role="status"
											aria-hidden="true"
										></span>
										<i class="px-3 bi bi-arrow-right"></i>
									</button>
								</div>
								<div class="mt-3">
									<div x-show="errorMessage" class="alert alert-danger" role="alert">
										<span x-text="errorMessage"></span>
									</div>
								</div>
							</div>
						</div>
						// <div class="hstack gap-2 ms-auto">
						// <button type="button" class="btn btn-sm btn-neutral d-none d-lg-inline-flex">
						// <i class="bi bi-arrow-90deg-right me-2"></i> Export
						// </button>
						// <a href="/pages/page-details.html" class="btn btn-sm btn-primary">
						// <i class="bi bi-plus-lg me-2"></i> New trade
						// </a>
						// </div>
						<div class="hstack gap-2 ms-auto">
							<button
								x-show="webhooks.length > 0"
								data-bs-target="#deleteProjectModal"
								data-bs-toggle="modal"
								class="btn btn-sm btn-danger"
							>
								<span
									id="spinner"
									class="htmx-indicator spinner-border spinner-border-sm"
									role="status"
									aria-hidden="true"
								></span>
								Delete All
							</button>
							<button
								x-show="webhooks.length === 0"
								data-bs-toggle="modal"
								data-bs-target="#createWebhookModal"
								class="btn btn-sm btn-primary"
							>
								<span
									id="spinner2"
									class="htmx-indicator spinner-border spinner-border-sm"
									role="status"
									aria-hidden="true"
								></span>
								<i class="bi bi-plus-circle"></i> Create Webhooks
							</button>
							<!-- Delete All Button (visible when webhooks exist) -->
						</div>
					</div>
					<div class="table-responsive">
						<table class="table table-hover table-nowrap">
							<thead>
								<tr>
									<th>
										<div class="text-base">
											<div class="form-check">
												<input
													class="form-check-input"
													type="checkbox"
													@change="selectAll()"
													x-model="selectAllCheckbox"
												/>
											</div>
										</div>
									</th>
									<th @click="sortTable('webhookId')">
										Webhook ID
										<i :class="getSortIcon('webhookId')"></i>
									</th>
									<th @click="sortTable('event')">
										Event
										<i :class="getSortIcon('event')"></i>
									</th>
									<th @click="sortTable('status')">
										Status
										<i :class="getSortIcon('status')"></i>
									</th>
								</tr>
							</thead>
							<tbody>
								<template x-if="!loading && totalItems === 0">
									<tr>
										<td colspan="8">No webhook found.</td>
									</tr>
								</template>
								<template x-for="webhook in paginatedwebhooks" :key="webhook.id">
									<tr>
										<td>
											<div class="form-check">
												<input
													class="form-check-input"
													type="checkbox"
													:value="webhook.id"
													x-model="selectedwebhooks"
												/>
											</div>
										</td>
										<td x-text="webhook.webhookId"></td>
										<td x-text="webhook.event"></td>
										<td>
											<span :class="badgeClass(webhook.status)" x-text="webhook.status"></span>
										</td>
									</tr>
								</template>
								<template x-for="i in 12 - paginatedwebhooks.length" :key="'empty' + i">
									<tr>
										<td colspan="5" class="py-7"></td>
									</tr>
								</template>
							</tbody>
						</table>
					</div>
					@p.PaginationControl()
				</div>
			</div>
			<div
				class="modal fade"
				id="deleteProjectModal"
				tabindex="-1"
				aria-labelledby="deleteProjectModalLabel"
				aria-hidden="true"
			>
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content overflow-hidden">
						<div class="modal-header pb-0 border-0">
							<h1 class="modal-title h4" id="deleteProjectModalLabel">Delete Webhooks</h1>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body p-0">
							<div class="px-6 py-5 border-bottom">
								<h3 class="modal-title h4" id="deleteProjectModalLabel">
									Are you sure you want to delete all 
									Webhooks? You will bot be able to get updateds from your e-commerce
								</h3>
							</div>
							<div class="px-6 py-5 bg-body-secondary d-flex justify-content-center">
								<button
									type="submit"
									hx-delete={ fmt.Sprintf("/project/settings/webhook/delete/%s",
								project.Id.String()) }
									class="btn btn-sm btn-danger"
									hx-target="#dashboard-content"
									data-bs-dismiss="modal"
									aria-label="Close"
									hx-indicator="#spinner"
								>
									Delete 
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div
				class="modal fade"
				id="createWebhookModal"
				tabindex="-1"
				aria-labelledby="createWebhookModalLabel"
				aria-hidden="true"
			>
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content overflow-hidden">
						<div class="modal-header pb-0 border-0">
							<h1 class="modal-title h4" id="createWebhookModalLabel">Create Webhooks</h1>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body p-0">
							<div class="px-6 py-5 border-bottom">
								<h3 class="modal-title h4" id="createWebhookModalLabel">
									This will create a webhook for all events for your project.
									You will be able to see the webhook in the webhook section.
								</h3>
							</div>
							<div class="px-6 py-5 bg-body-secondary d-flex justify-content-center">
								<button
									type="submit"
									hx-get={ fmt.Sprintf("/project/settings/webhook/createall/%s",
								project.Id.String()) }
									class="btn btn-sm btn-dark"
									hx-target="#dashboard-content"
									data-bs-dismiss="modal"
									aria-label="Close"
									hx-indicator="#spinner2"
								>
									Create Webhooks
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</main>
		<script>
		function webhookTable(projectId) {
			return {
				projectID: projectId,
				currentTab: 'all',
				webhooks: [],
				selectedwebhooks: [],
				selectAllCheckbox: false,
				sortKey: 'event',
				sortAsc: false,
				currentPage: 1,
				itemsPerPage: 12,
				totalItems: 0,
				totalPages: 0,
				loading: false,
				showUI: false,

				async init() {
					await this.fetchwebhooks(this.currentPage);
					// this.showUI = true; // Show UI after the delay
				},

				async fetchwebhooks(page = 1) {
					this.loading = true;
					try {

						const url = this.getUrlForTab(this.currentTab, page);
						const response = await fetch(url);
						const result = await response.json();
						if (response.ok) {
							this.webhooks = result.data || [];
							this.totalItems = result.meta.totalItems || 0;
							this.currentPage = result.meta.currentPage || 1;
							this.itemsPerPage = result.meta.itemsPerPage || 10;
							this.totalPages = result.meta.totalPages || 0;
						} else {
							console.error('Error fetching data:', result.message);
						}
					} catch (error) {
						console.error('Error fetching data:', error);
					} finally {
						this.loading = false;
					}
				},

				getUrlForTab(tab, page) {
					const baseUrl = `${window.location.origin}/webhook/table/${this.projectID}`;
					const sortDirection = this.sortAsc ? 'asc' : 'desc'; // Determine sort direction
					switch (tab) {
						case 'all':
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
						case 'completed':
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
						case 'processing':
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
						case 'pending':
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
						case 'cancelled':
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
						default:
							return `${baseUrl}/${page}?sort=${this.sortKey}&direction=${sortDirection}`;
					}
				},

				selectTab(tab) {
					this.currentTab = tab;
					this.currentPage = 1; // Reset to first page
					this.fetchwebhooks(this.currentPage);
				},

				selectAll() {
					this.selectedwebhooks = this.selectAllCheckbox ? this.webhooks.map(d => d.id) : [];
				},
				sortTable(key) {
					if (this.sortKey === key) {
						// Toggle sort direction if the same column is clicked
						this.sortAsc = !this.sortAsc;
					} else {
						// Set new sort key and default to ascending order
						this.sortKey = key;
						this.sortAsc = true;
					}

					// Sort the fetched webhook data locally
					this.webhooks = this.webhooks.sort((a, b) => {
						let valueA = a[key];
						let valueB = b[key];

						// Handle different data types (string, number, etc.)
						if (typeof valueA === 'string') {
							valueA = valueA.toLowerCase(); // Make string comparisons case-insensitive
							valueB = valueB.toLowerCase();
						}

						if (this.sortAsc) {
							return valueA > valueB ? 1 : valueA < valueB ? -1 : 0;
						} else {
							return valueA < valueB ? 1 : valueA > valueB ? -1 : 0;
						}
					});
				},
				getSortIcon(key) {
					if (this.sortKey !== key) return '';
					return this.sortAsc ? 'bi bi-chevron-up' : 'bi bi-chevron-down';
				},

				changePage(page) {
					if (page < 1 || page > this.totalPages) return;
					this.fetchwebhooks(page);
				},

				get paginatedwebhooks() {
					return this.webhooks;
				},

				get currentPageStart() {
					return (this.currentPage - 1) * this.itemsPerPage + 1;
				},

				get currentPageEnd() {
					return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);
				},
				get pageNumbers() {
					const range = 2; // Number of pages to show around the current page
					let start = Math.max(1, this.currentPage - range);
					let end = Math.min(this.totalPages, this.currentPage + range);

					// Adjust range if there are not enough pages on one side
					if (this.totalPages - end < range) {
						end = this.totalPages;
						start = Math.max(1, end - 2 * range);
					} else if (start <= range) {
						start = 1;
						end = Math.min(this.totalPages, start + 2 * range);
					}

					return Array.from({ length: end - start + 1 }, (_, i) => start + i);
				},
				badgeClass(status) {
					const baseClass = 'badge bg-body-secondary badge-custom'; // Add badge-custom class
					switch (status) {
						case 'paused':
							return `${baseClass} text-warning`;
						case 'active':
							return `${baseClass} text-success`;
						case 'disabled':
							return `${baseClass} text-danger`;
						case 'paused':
							return `${baseClass} text-warning`;
						default:
							return baseClass;
					}
				},
				async applyAction() {
					this.loading = true;
					this.errorMessage = ""; // Clear previous error message
					this.showDropdown = true; // Close dropdown on action

					const selectedOrderIds = this.selectedOrders.join(',');
					if (!selectedOrderIds || !this.selectedStatus) {
						this.errorMessage = 'Please select at least one order and a status.';
						this.loading = false;
						this.showDropdown = true;
						return;
					}

					try {
						const response = await fetch(`/webhook/bulk-action/${this.projectID}`, {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({
								status: this.selectedStatus,
								webhooks: selectedOrderIds.split(','),
							}),
						});
						const result = await response.json();

						if (response.ok) {
							// Handle success (e.g., show a success message or refresh the table)
							this.fetchOrders(this.currentPage);
							console.log('Bulk action successful:', result);
							this.showDropdown = false;
						} else {
							this.errorMessage = result.message || 'An error occurred while processing the request.';
						}
					} catch (error) {
						console.error('Error during bulk action:', error);
						this.errorMessage = 'An error occurred while processing the request.';
						this.showDropdown = true;
					} finally {
						this.loading = false;

					}
				},
				async createWebhooks() {
					// Logic for creating a new webhook (could be a form, modal, or redirection)
					console.log("Redirecting to create webhooks...");
					window.location.href = `/webhooks/create/${this.projectID}`;  // Example: Redirecting to a webhook creation page
				},
			};
		}

	</script>
	</div>
}
