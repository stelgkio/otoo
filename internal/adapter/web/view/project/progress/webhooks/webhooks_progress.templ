package views

import (
	"fmt"
	"strings"
	w "github.com/stelgkio/otoo/internal/core/domain/woocommerce"
	
)

templ WebHooksProgress(projectId string, webhooks []w.WebhookRecord) {
	<div
		id="dashboard-content"
		class="flex-fill overflow-y-lg-auto scrollbar bg-body rounded-top-4 rounded-top-start-lg-4 rounded-top-end-lg-0 border-top border-lg shadow-2"
	>
		<main class="container-fluid px-3 py-5 p-lg-6 p-xxl-8" 
			hx-trigger="done" 
			hx-get={ fmt.Sprintf("/webhook/progress/done/%s",projectId) }
			hx-target="#dashboard-content"
		>
			
			<header class="py-4 border-bottom">
				<div class="row align-items-center">
					<div class="col">
						<div class="d-flex align-items-center gap-4">
							<div>
								<button
									type="button"
									class="btn-close text-xs"
									aria-label="Close"
									hx-get={ fmt.Sprintf("project/%s",projectId) }
									hx-target="#dashboard-content"
								></button>
							</div>
							<div class="vr opacity-20 my-1"></div>
							<h1 class="h4 ls-tight">Create Webhooks</h1>
						</div>
					</div>
				</div>
			</header>
			<div class="card">
				<div class="card-header py-3">
					<div class="d-flex align-items-center">
						<h5>In progress</h5>
						 <div class="hstack gap-3 ms-auto">
						<div hx-get={ fmt.Sprintf("/webhook/progress/%s",projectId) }
							 hx-trigger="every 1s">
											<span class="badge bg-warning-subtle text-warning">Pending
													<span  class="spinner-border spinner-border-sm" role="status"></span>
											</span>
										</div>
						 </div>
					</div>
				</div>
				<div class="card-body py-0">
					<div class="list-group list-group-flush mb-5">
						<div class="list-group-item py-3">
						
							<div class="row g-3 align-items-center">
								for _, item := range webhooks {
									<div class="col-sm-6 col-12 d-flex">
										<div
											class="form-check form-check-linethrough d-flex align-items-center gap-1"
										>
											<input
												class="form-check-input w-rem-5 h-rem-5 mt-0 rounded-circle border-dashed flex-none"
												type="checkbox"
												id="check-in-progress-1"
												disabled
											/>
											<a
												href="#offcanvasCreate"
												class="form-check-label fw-normal text-heading text-primary-hover ms-2"
												data-bs-toggle="offcanvas"
											>
												{ TitleCase(item.Event) }
											</a>
										</div>
									</div>
									<div class="col-sm-auto col-12 ms-sm-auto">
										<div class="hstack gap-5 justify-content-end">
											
												if item.Error == "" {
													<div><span class="badge bg-success-subtle text-success">Success</span></div>
												<div class="position-relative text-sm"><i class="bi bi-check-circle-fill text-success"></i></div>
												} else {
												<div><span class="badge bg-danger-subtle text-danger">Error</span></div>
												<div class="position-relative text-sm"><i class="bi bi-check-circle-fill text-danger"></i> </div>
													
												}
											
										</div>
									</div>		
								}						
							</div>						
						</div>						
					</div>
				</div>
			</div>
		</main>
	</div>
}


// TitleCase converts a string like "coupon.created" to "Coupon Created"
func TitleCase(s string) string {
    parts := strings.Split(s, ".")
    for i, part := range parts {
        parts[i] = strings.Title(strings.ToLower(part))
    }
    return strings.Join(parts, " ")
}